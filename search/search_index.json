{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#health-ri-semantic-interoperability-initiative","title":"Health-RI Semantic Interoperability Initiative","text":"<p>Welcome to the official documentation site for the Health-RI Semantic Interoperability Initiative.</p> <p>This site serves as a central resource for: - Understanding what semantic interoperability is and why it matters, - Learning about ontologies and ontology engineering approaches, - Exploring OntoUML and gUFO, the modeling foundations selected for our efforts, - Documenting the method developed and applied at Health-RI to achieve semantic integration across datasets and systems.</p>"},{"location":"#about-health-ri","title":"About Health-RI","text":"<p>Health-RI is a national initiative in the Netherlands dedicated to building an integrated infrastructure for health and life sciences data. By improving data sharing, reuse, and accessibility, Health-RI aims to empower researchers, clinicians, and policymakers to accelerate data-driven healthcare innovation.</p> <p>Semantic interoperability plays a foundational role in this mission by ensuring that data from diverse sources can be aligned and understood consistently \u2014 not just technically, but conceptually.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<p>This site documents Health-RI's efforts to enable semantic interoperability in health data by providing foundational concepts, modeling techniques, and methodological guidance. It is designed to support researchers, data stewards, and engineers working to align data meaningfully across systems.</p> <ul> <li>Semantic Interoperability: Key principles and motivations behind semantic interoperability.</li> <li>OntoUML &amp; gUFO: Ontologically grounded modeling tools and their application in semantic infrastructures.</li> <li>The Health-RI Method: A structured approach for creating reference models and mappings in collaborative environments.</li> </ul>"},{"location":"contributing/","title":"Contributing to the Health-RI Semantic Interoperability Effort","text":"<p>We welcome community feedback and contributions to help improve the quality, coverage, and clarity of the models and ontologies developed as part of Health-RI's semantic interoperability initiative.</p> <p>To streamline the contribution process, we provide structured submission forms that help ensure your input is reviewed and addressed efficiently. Choose one of the options below to open the appropriate GitHub Issue form:</p> <p>Report an Ontology Error Request a New Concept Other Contribution or Request</p> <p>The sections below explain each type of contribution in more detail and link to the corresponding submission form.</p>"},{"location":"contributing/#contribution-channels","title":"Contribution Channels","text":"<p>You can contribute to this effort by submitting one of the following types of input:</p>"},{"location":"contributing/#1-report-an-error-in-the-ontouml-or-gufo-ontology","title":"1. Report an Error in the OntoUML or gUFO Ontology","text":"<p>If you identify an error, inconsistency, ambiguity, or omission in any of the semantic artifacts (including diagrams, models, or OWL files), please let us know. Click here to submit an ontology error report.</p> <p>Typical reports may include:</p> <ul> <li>Incorrect use of stereotypes or relations</li> <li>Mislabeled or ambiguous classes</li> <li>Discrepancies between diagrams and OWL implementation</li> <li>Logical contradictions or violations of ontological principles</li> </ul>"},{"location":"contributing/#2-request-a-new-concept-to-be-added","title":"2. Request a New Concept to Be Added","text":"<p>If you believe a concept is missing from the ontology and should be included (e.g., a new domain-specific class or relation), please use the form below to propose it. Click here to request a new concept.</p> <p>Your request should ideally include:</p> <ul> <li>A clear label and definition for the proposed concept</li> <li>Its relevance within the Health-RI context</li> <li>References, standards, or examples supporting the need for this concept</li> </ul>"},{"location":"contributing/#3-other-contributions-or-collaboration-requests","title":"3. Other Contributions or Collaboration Requests","text":"<p>For all other types of contributions\u2014including documentation suggestions, collaboration offers, use case proposals, or questions about modeling and alignment\u2014please use the general-purpose form below. Click here to submit a general contribution or request.</p> <p>Examples of valid submissions:</p> <ul> <li>Proposing a new use case to guide modeling efforts</li> <li>Requesting clarification about specific OntoUML patterns</li> <li>Suggesting improvements to model documentation</li> <li>Offering to align a dataset with the reference ontology</li> </ul>"},{"location":"contributing/#submission-process","title":"Submission Process","text":"<p>Each of the forms linked above will guide you through the required fields. Submissions are publicly visible as GitHub Issues in our repository and are reviewed regularly by the modeling and coordination teams.</p> <p>By submitting, you agree to have your contributions used in future releases of the model and/or documentation. Attribution will be provided where applicable.</p> <p>Thank you for your interest in improving semantic interoperability and helping build a robust reference ontology for health and life sciences.</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#project-overview-and-strategic-context","title":"Project Overview and Strategic Context","text":"<p>Questions about the initiative\u2019s purpose, strategic goals, expected impact, and broader context.</p> <p>Disclaimer</p> <p>The answers in this section are part of an ongoing effort to address strategic questions about the initiative. They are based on initial interpretations and should be used with caution. All entries are marked as drafts and will be further refined and validated in collaboration with stakeholders.</p> What is the goal of Health-RI\u2019s semantic interoperability initiative? <p>To enable meaningful data integration across health and life sciences institutions by aligning data semantically, not just structurally. This is achieved through the development and adoption of a common reference model that captures domain meaning explicitly.</p> What exactly are we trying to achieve with semantic interoperability? <p>We aim to align external and internal ontologies to a shared reference model, ensuring that semantic definitions are preserved across conceptual and computational layers. This is achieved through structured mappings (e.g., <code>hriv:hasSemantics</code>) from third-party concepts to Health-RI\u2019s reference ontology (OntoUML) and its computational counterpart (gUFO).</p> Why is semantic interoperability important in healthcare and life sciences? <p>Because it ensures that data from diverse sources is interpreted consistently, reducing the risk of misinterpretation and improving reusability, reproducibility, and trust. It supports FAIR data practices and accelerates data-driven innovation.</p> What problem is this initiative addressing? <p>It addresses the issue of inconsistent data semantics across institutions, which leads to errors, false agreement, and limited reuse. Many systems use similar terms but with different meanings, or different terms for the same concept.</p> Is there a standardized way to define common reference models? Are we using standardized methods, languages, or tools? <p>There is currently no global standard for defining and implementing semantic reference models. However, the approach adopted by this initiative\u2014based on ontology-driven conceptual modeling and explicit ontological commitments\u2014is recognized in the literature as the only viable path to achieve real semantic interoperability (see Guizzardi (2020)).</p> <p>We apply well-established methods and languages that have been successfully used in a variety of domains and are widely recognized for their effectiveness (see Guizzardi et al. (2022)). These include:</p> <ul> <li>OntoUML for conceptual modeling</li> <li>OWL and RDF for computational representation and publishing</li> <li>SSSOM Mappings for declaring resources semantics</li> <li>Persistent identifiers, alignment with FAIR principles</li> </ul> <p>Other approaches may offer faster implementation or simpler integration but often fail to ensure semantic consistency over time. By contrast, our approach prioritizes long-term semantic precision and interoperability.</p> What does success look like for this project? <p>Success means having a robust reference model (OntoUML) and executable OWL artifacts (gUFO) in place, with external ontologies semantically aligned through precise mappings. It also includes supporting community contributions, replacing approximate mappings (e.g., <code>hriv:hasSemantics</code>) with exact ones where possible, and continuously refining the model to bridge semantic gaps.</p> Who will benefit from or use the developed solutions? <p>Researchers, clinicians, developers, and data stewards who need to align datasets from different systems and institutions while preserving domain meaning.</p> Are there any external collaborators or partner organizations? (TBD) <p>TBD.</p> What is the current situation regarding data interoperability in the Netherlands? (TBD) <p>TBD.</p> How do current systems or processes work without semantic alignment? <p>Without semantic alignment, systems may use the same term for different concepts or different terms for the same concept, causing ambiguity and inconsistency.</p> What are some examples of current successes or progress? <p>The development of the OntoUML conceptual model, its implementation as the gUFO OWL ontology, and the strategy for semantically aligning third-party ontologies using Health-RI Mapping Vocabulary properties are all concrete milestones achieved. Figures and examples in the documentation illustrate successful alignment strategies already in use.</p> What challenges are currently being faced? <p>One challenge is when no exact match exists between external concepts and the reference ontology. This requires approximate mappings and motivates the need to expand the Health-RI ontology to bridge gaps. Another challenge is managing transitivity and ambiguity in mappings (e.g., limiting to a single <code>hriv:hasSemantics</code> per concept).</p> What risks and limitations should be considered? (TBD) <p>TBD.</p> What assumptions are being made during development? (TBD) <p>TBD.</p> What changes are expected in the future? <p>Future work includes refining the ontology by introducing intermediate concepts to replace approximate mappings with exact ones, enhancing semantic precision and reasoning capabilities.</p> How might the future process or system improve data use across institutions? (TBD) <p>TBD.</p> What changes will users experience? (TBD) <p>TBD.</p> What is the common reference model and why is it needed? <p>It\u2019s a conceptual model created using OntoUML to serve as a semantic anchor for all participating data schemas. Instead of replacing local schemas, it provides a shared foundation for mapping and aligning meaning.</p> <p>OntoUML defines the domain-level semantics, while gUFO implements those concepts in OWL. This layered architecture ensures that semantic meaning is preserved from human-level models to machine-readable artifacts.</p> <p>Read more.</p> How does this initiative relate to the FAIR principles? <p>It supports the 'I' in FAIR\u2014Interoperability\u2014by grounding vocabularies and schemas in shared ontologies and ontological commitments. Learn more</p> What are the main components of the approach? <ul> <li>OntoUML conceptual modeling</li> <li>gUFO OWL-based computational ontologies</li> <li>Schema-to-ontology mappings using tools like SSSOM</li> </ul> <p>Read more.</p> Why do we need the semantic interoperability initiative if standards like HL7, OMOP, or DCAT-AP already exist? Isn\u2019t this duplicating existing efforts? <p>This initiative complements existing standards like HL7, OMOP, and DCAT by focusing on semantic precision, ontological clarity, and interoperability at the conceptual level. While HL7 and OMOP define syntactic and structural specifications for health data, this initiative addresses foundational semantics to align and reason over data models meaningfully. It:</p> <ul> <li>Provides foundational ontological grounding that is missing in most standards.</li> <li>Enables alignment across heterogeneous schemas and institutions through a shared conceptual backbone.</li> <li>Supports model-driven engineering (MDE) practices to enable consistent transformations and mappings.</li> </ul> What is the relationship between this initiative and existing health data standards such as OMOP, HL7, or DCAT-AP? <p>This initiative does not aim to create a new standard. Instead, it recognizes that existing standards such as OMOP, HL7, and DCAT-AP each serve different purposes and contain distinct types of content\u2014ranging from data exchange formats to terminologies and domain-specific data models.</p> <p>The goal is to harmonize the underlying concepts from these standards, as well as other models and artifacts, by aligning them with a shared semantic reference ontology. This ontology provides a common conceptual foundation that enables consistent interpretation and integration of diverse representations. The reference ontology acts as a semantic anchor, supporting interoperability across heterogeneous data sources, standards, and systems.</p> Why did Health-RI decide to build a new ontology instead of reusing existing ones from the biomedical and life sciences domains (like those in OBO Foundry)? (TBD) <p>TBD.</p> Does the Health-RI initiative reuse any existing biomedical or life sciences ontologies? Are external ontologies integrated or referenced within the Health-RI ontology? (TBD) <p>TBD.</p> Given that many life sciences ontologies adopt the Basic Formal Ontology (BFO), what motivated the use of UFO rather than BFO as the foundation for this initiative\u2019s ontology? (TBD) <p>TBD.</p>"},{"location":"faq/#modeling-approach-ontouml-and-gufo","title":"Modeling Approach: OntoUML and gUFO","text":"<p>Questions about the internal modeling framework, layers, and implementation choices.</p> What are OntoUML and gUFO, and why are they used? <p>OntoUML is a conceptual modeling language grounded in the foundational ontology named Unified Foundational Ontology (UFO). gUFO is its OWL counterpart, enabling computational use. Together, they ensure semantic precision and machine-actionable models.</p> <p>OntoUML operates at MDA's CIM layer to capture conceptual semantics, while gUFO provides a platform-independent OWL implementation at the PIM layer. This ensures a traceable and interoperable flow from conceptualization to deployment.</p> <p>OntoUML overview \u2022 gUFO details</p> OntoUML and gUFO seem very complex. Isn\u2019t that a barrier to adoption? <p>This is a common concern. Foundational ontologies like UFO are indeed complex\u2014because they aim to capture real-world meaning with a high level of precision and avoid ambiguity across domains. Some complexity is simply inherent to the task: when we model the real-life elements, especially across institutions or sectors, we cannot always rely on overly simplistic representations.</p> <p>That said, this initiative does not require users to engage directly with UFO. Instead, we rely on OntoUML and gUFO to make that foundational theory accessible in practice. OntoUML provides intuitive modeling constructs grounded in UFO, while gUFO offers a lightweight OWL implementation suitable for real-world applications.</p> <p>This layered approach lets modelers benefit from UFO\u2019s expressive power without being overwhelmed by its formal depth. The complexity is managed by the modeling framework and supported by tools like Visual Paradigm and the OntoUML plugin. In fact, these languages have already been applied successfully in domains like public health, law, and digital humanities\u2014demonstrating that the approach is both practical and scalable.</p> How is the OntoUML model converted to OWL? <p>The OntoUML model is exported to OWL using the gUFO specification via plugin tooling. The resulting ontology retains the original semantics in a format suitable for Semantic Web technologies. More info.</p> What is the difference between OntoUML and gUFO? <p>OntoUML is a conceptual modeling language for humans; gUFO is its OWL-based computational counterpart used in Semantic Web technologies. OntoUML \u2022 gUFO</p>"},{"location":"faq/#mapping-and-alignment-strategy","title":"Mapping and Alignment Strategy","text":"<p>Questions about how external concepts are aligned to the Health-RI reference model using dedicated mapping properties from the Health-RI Mapping Vocabulary.</p> How are mappings from local schemas to the reference model created? <p>If schemas are OWL/RDF-based, mappings can be embedded directly using standard RDF properties. Otherwise, external mappings are created using SSSOM.</p> <p>Mappings follow the Health-RI Mapping Vocabulary and can be asserted using:</p> <ul> <li><code>hriv:hasSemantics</code> for perfect semantic alignment (only one allowed),</li> <li><code>hriv:hasSemanticsBroad</code> or <code>hriv:hasSemanticsNarrow</code> when the match is approximate.</li> </ul> <p>These mappings support semantic alignment without requiring modification to the original schema and are managed either by Health-RI (non-invasively in SSSOM) or by partners (embedded in their own RDF models).</p> <p>Full explanation</p> What is <code>hriv:hasSemantics</code>, and how is it different from <code>owl:equivalentClass</code> or <code>skos:exactMatch</code>? <p><code>hriv:hasSemantics</code> (equivalent to <code>semiotics:expresses</code>) is used to state that an external concept carries the same intended meaning as a concept in the Health-RI reference model. It expresses a strong semantic alignment in terms of shared meaning, but it does not imply logical equivalence.</p> <ul> <li>Unlike <code>owl:equivalentClass</code>, it does not entail formal logical equivalence and therefore avoids unintended reasoning consequences when integrating ontologies with different logical foundations.</li> <li>Unlike <code>skos:exactMatch</code>, which is often used for linking concepts across vocabularies in a looser, less formally grounded way, <code>hriv:hasSemantics</code> is tied to an explicit semantic grounding in a reference ontology. This makes it more precise for interoperability scenarios where meaning\u2014not logical entailment\u2014is the key requirement.</li> </ul> <p>In summary, <code>hriv:hasSemantics</code> is intended for strong semantic alignment without the risks of logical overcommitment (<code>owl:equivalentClass</code>) or the potential ambiguity of generic lexical alignment (<code>skos:exactMatch</code>).</p> Why is there a rule that only one <code>hriv:hasSemantics</code> is allowed per concept? <p>To avoid semantic ambiguity. Allowing multiple <code>hriv:hasSemantics</code> assertions for the same concept would imply conflicting definitions and hinder consistent interpretation. Each external concept must match only one Health-RI concept with perfect equivalence.</p> What should I do if no exact match exists between my concept and the Health-RI ontology? <p>If your concept is broader or narrower than any existing reference concept, use <code>hriv:hasSemanticsBroad</code> or <code>hriv:hasSemanticsNarrow</code> accordingly. These mappings allow approximate alignment. You are also encouraged to contact the Health-RI team to propose additions to the reference model to enable more precise mappings in the future (read more.).</p> Can new concepts be added to the Health-RI ontology to improve mapping precision? <p>Yes. When <code>hriv:hasSemantics</code> cannot be used due to missing concepts, we encourage you to contact the Health-RI modeling team (read more.).</p> <p>If justified, new intermediate concepts may be added to the reference ontology. This helps replace approximate mappings (<code>hriv:hasSemanticsBroad</code>, <code>hriv:hasSemanticsNarrow</code>) with exact ones and ensures better semantic precision for reasoning, integration, and long-term alignment.</p> <p>See example</p> Who can create or host the semantic mappings? <p>Mappings can be authored by:</p> <ul> <li>Health-RI (non-invasive, published in SSSOM format), for public or external ontologies;</li> <li>External partners, by embedding <code>hriv:hasSemantics*</code> statements directly in their ontology files, especially when they control the editorial process of the external artifact.</li> </ul> Can I request new reference concepts if needed for mapping? <p>Yes. If you find that no suitable concept exists in the Health-RI ontology to match yours, you can propose new reference concepts. These requests are welcome and reviewed by the modeling team. If accepted, new concepts may be added to enable stronger mappings in the future.</p> Who creates and maintains the semantic mappings to the Health-RI ontology? <p>Mappings can be created and maintained by:</p> <ul> <li>The Health-RI team, which curates non-invasive mappings using the SSSOM format. These mappings are published externally and do not alter the original third-party ontologies.</li> <li>External partners, who can embed mappings directly in their own ontology files using Health-RI Mapping Vocabulary properties (e.g., <code>hriv:hasSemantics</code>).</li> </ul> <p>Read more.</p>"},{"location":"faq/#sssom-mapping-set","title":"SSSOM Mapping Set","text":"Is the Health-RI SSSOM Mapping Set manually curated or automatically generated? <p>It is manually curated by the Health-RI mapping team with input from external collaborators.</p> Where can I download the SSSOM Mapping Set, and in which formats? <p>Use the stable URIs:</p> <ul> <li><code>https://github.com/Health-RI/semantic-interoperability/mappings</code> \u2192 TTL</li> <li><code>https://github.com/Health-RI/semantic-interoperability/mappings/ttl</code> \u2192 TTL</li> <li><code>https://github.com/Health-RI/semantic-interoperability/mappings/tsv</code> \u2192 TSV.</li> </ul> How is the mapping set versioned? <p>The mapping set uses date-based versions (YYYY-MM-DD) tied to the publication date, with at most one release per day.</p> Can a published mapping be deleted? How are corrections handled? <p>Published mappings cannot be removed. To revise an entry, create a new record that uses <code>replaces</code> to supersede the old one; the system will automatically add the corresponding <code>isReplacedBy</code> link to the replaced record at publication time.</p> Which SSSOM fields are mandatory, optional, or system-assigned? <p>Fields are divided by responsibility:</p> <ul> <li>Contributor (mandatory) \u2014 must be provided in PRs (e.g., <code>subject_id</code>, <code>predicate_id</code>, <code>object_id</code>, <code>mapping_justification</code>, <code>author_id</code>, <code>mapping_date</code>)</li> <li>Contributor (optional) \u2014 can be added if available</li> <li>Curator \u2014 added or verified by Health-RI curators</li> <li>System (Fixed) \u2014 constant, cannot be changed</li> <li>System (Generated) \u2014 assigned at publication time</li> </ul> What fields should I provide when contributing a mapping? <p>At minimum, contributors must provide all mandatory fields: <code>subject_id</code>, <code>predicate_id</code>, <code>object_id</code>, <code>mapping_justification</code>, <code>author_id</code>, and <code>mapping_date</code>.</p> <p>Optional fields can be added if available (for example, comments or additional provenance). System-assigned and curator fields will be handled during the review and publication process.</p> <p>For the complete specification of all fields and their roles, see the Mapping Set Schema Reference page.</p> Besides creating positive assertions, can I also create negative ones? <p>Yes. Most mappings are positive, where you state that two concepts are related. But sometimes you may want to explicitly say that a mapping should not hold. For that, use the field <code>predicate_modifier</code> with the value <code>Not</code>. If your mapping is positive, just leave this field empty.</p> <p>Examples</p> <ul> <li> <p>Positive mapping: \"fhir:Patient has its semantics defined by hrio:Patient\"   <code>subject_id = fhir:Patient</code> <code>predicate_id = hriv:hasSemantics</code> <code>object_id = hrio:Patient</code> <code>predicate_modifier =</code> (empty)</p> </li> <li> <p>Negative mapping: \"vet:Patient DOES NOT have its semantics defined by hrio:Patient\"   <code>subject_id = vet:Patient</code> <code>predicate_id = hriv:hasSemantics</code> <code>object_id = hrio:Patient</code> <code>predicate_modifier = Not</code></p> </li> </ul>"},{"location":"faq/#community-contributions-and-feedback","title":"Community Contributions and Feedback","text":"What are the supported ways to contribute a new mapping row? <p>There are two options:</p> <p>1) Issue form (preferred) \u2014 submit the SSSOM mapping issue form for a single row. 2) Excel template \u2014 fill in the <code>mappings</code> sheet (rows) and the <code>prefix</code> sheet (CURIE bindings) in the provided XLSX, then attach it to a new issue. In the template, headers for mandatory fields are black, and optional ones are green. Both methods are curator-reviewed and integrated into the official mapping set.</p> What should I check before submitting a mapping? <p>Use the submission checklist:</p> <ul> <li>All mandatory contributor fields are present and correctly formatted.</li> <li>Optional values (if any) use valid identifiers (e.g., ORCID, resolvable URIs, SEMAPV terms).</li> <li>If you pin a version, ensure <code>object_source</code> is a specific version URI (not a generic one).</li> </ul>"},{"location":"faq/#ontology-lifecycle-and-publishing","title":"Ontology Lifecycle and Publishing","text":"<p>Questions about how the ontology is released, versioned, and maintained over time.</p> Where can I find the latest version of the Health-RI ontology? <p>All published versions are available in the <code>/ontologies/</code> folder. The most recent major release is always accessible via: https://w3id.org/health-ri/ontology/latest More on versioning</p> What is the difference between major, minor, and patch versions in your versioning policy? <p>We follow an adapted semantic versioning scheme: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>. - Major versions mark conceptual milestones or structural overhauls and are considered stable and citable. - Minor versions include scoped improvements that preserve semantic compatibility. - Patch versions address fixes or clarifications without modifying the established scope. Only major versions trigger a formal release and a published specification.</p> <p>Read more.</p> What does the 'latest' folder contain and how is it maintained? <p>The <code>ontologies/latest/</code> folder always mirrors the highest available published version of each artifact. It provides stable access to the most recent files without needing to specify a version number. Each new release automatically updates the <code>latest/</code> folder to reflect its content.</p> How do I cite or refer to the Health-RI initiative and its ontology? <p>You can use the following permanent, stable, and dereferenceable URIs to cite the initiative and its semantic artifacts:</p> <ul> <li>Initiative-wide identifier: <code>https://w3id.org/health-ri/semantic-interoperability</code></li> <li>Health-RI Ontology root: <code>https://w3id.org/health-ri/ontology</code></li> </ul> <p>These PIDs support long-term access, are suitable for citations, and follow FAIR practices.</p> <p>Read more.</p> What types of files are published with each ontology version? <p>Each ontology version includes the following artifacts:</p> <ul> <li><code>.vpp</code>: OntoUML conceptual model (Visual Paradigm project)</li> <li><code>.json</code>: OntoUML export compliant with the OntoUML Schema</li> <li><code>.ttl</code>: OWL ontology (based on gUFO) \u2014 only for syntactically valid models</li> <li><code>.md</code>: Human-readable documentation (Markdown)</li> <li><code>.html</code>: Human-readable specification (HTML)</li> <li><code>.png</code>: Diagram images (only in the <code>latest/</code> folder)</li> </ul> <p>These are published under both <code>ontologies/latest/</code> (most recent version) and <code>ontologies/versioned/</code> (versioned archive). More details here.</p> Where can I find the exported images of the ontology diagrams? <p>Exported PNG images of all OntoUML diagrams are available in the <code>ontologies/latest/images/</code> folder. These images are always generated from the latest <code>.vpp</code> file and are not maintained for previous versions.</p> Why is there sometimes no OWL (.ttl) file available for a version? <p>The <code>.ttl</code> file (gUFO-compliant OWL ontology) is only generated when the OntoUML model is syntactically valid. Incomplete or draft versions may not include a <code>.ttl</code> file until model consistency is ensured.</p> Can the latest version of the OWL (.ttl) file correspond to a different version than the latest version of the OntoUML (.json/.vpp) model? <p>Yes. The <code>.ttl</code> versioning is managed independently and may lag behind the <code>.vpp</code> or <code>.json</code> files. The OWL file includes a <code>dcterms:conformsTo</code> triple that explicitly links it to the OntoUML version it was derived from.</p> How can I access a specific version of the Health-RI ontology? <p>Use the versioned PID format: <code>https://w3id.org/health-ri/ontology/vX.Y.Z/{format}</code></p> <p>Replace <code>X.Y.Z</code> with the version number (e.g., <code>v0.6.0</code>) and <code>{format}</code> with one of:</p> <ul> <li><code>ttl</code> for the ontology file (Turtle)</li> <li><code>vpp</code> for the OntoUML Visual Paradigm file</li> <li><code>json</code> for the OntoUML JSON export</li> <li><code>specification</code> for the HTML spec</li> <li><code>documentation</code> for the Markdown documentation</li> </ul> <p>Example: <code>https://w3id.org/health-ri/ontology/v0.6.0/ttl</code> \u2192 Ontology file for version 0.6.0 <code>https://w3id.org/health-ri/ontology/v0.6.0/specification</code> \u2192 Human-readable specification</p> <p>Details here.</p> What\u2019s the difference between the latest and versioned ontology URIs? <ul> <li>The latest URI (<code>https://w3id.org/health-ri/ontology</code>) always points to the most recent stable release. Its content may change over time as new versions are published.</li> <li>A versioned URI (e.g., <code>https://w3id.org/health-ri/ontology/v2.0.0</code>) points to a specific, immutable release. Its content will never change, ensuring long-term consistency.</li> </ul> <p>Use the versioned URI when immutability is essential \u2014 for example, in scientific publications, formal mappings, or regulatory documentation. This guarantees that your references always point to the same version of the ontology.</p> <p>Use the latest URI when you want to stay aligned with the most up-to-date ontology version and future improvements.</p> <p>More info</p> Which URI should I use in my mapping: the latest or a versioned one? <p>Use the latest URI (e.g., <code>https://w3id.org/health-ri/ontology#HealthcarePatient</code>) when:</p> <ul> <li>You want to always point to the most up-to-date definition.</li> <li>Your use case allows future updates without breaking dependencies.</li> </ul> <p>Use the versioned URI (e.g., <code>https://w3id.org/health-ri/ontology/v2.0.0#HealthcarePatient</code>) when:</p> <ul> <li>You need traceability and reproducibility (e.g., publications, data provenance).</li> <li>You want to avoid semantic drift caused by future updates.</li> </ul> <p>Best practices.</p> What is the publishing strategy for ontology releases? <p>A fast versioning strategy is adopted, where only major versions are considered stable and published with full documentation. Minor/patch versions are published for collaboration and traceability. More info.</p> How are the OntoUML and gUFO ontologies and the produced semantic mappings maintained over time? <p>Ontologies and semantic mappings are maintained in version-controlled repositories and released through a structured publishing pipeline. Each release is assigned a permanent, citable URL, with both a persistent identifier (PURL) and a timestamped version. Ontologies are published in multiple formats (e.g., RDF/Turtle, JSON) and validated prior to release. This process ensures transparency, long-term accessibility, and semantic stability across versions. Read more.</p> Who is responsible for maintaining the ontology and its associated mappings? <p>The Health-RI team is responsible for maintaining the core ontologies and mappings produced within the initiative. This work is carried out in close collaboration with external partners who contribute ideas, suggestions, and mappings. Contributions are reviewed and integrated through a structured, version-controlled process. Read more.</p> How will the new solutions be maintained and supported? (TBD) <p>TBD.</p> How will the solution be tested and accepted? (TBD) <p>TBD.</p>"},{"location":"faq/#community-contributions-and-feedback_1","title":"Community Contributions and Feedback","text":"<p>Questions about how users can provide input, report issues, or contribute to the ontology and mappings.</p> Can external parties contribute to the modeling or mapping process? <p>Yes. External contributions are welcome and encouraged.</p> <p>Community members can submit suggestions, error reports, or collaboration proposals directly via our GitHub Issue Forms.</p> <p>Available contribution types include:</p> <ul> <li>Reporting errors or inconsistencies in the OntoUML/gUFO models</li> <li>Proposing new ontology concepts</li> <li>Suggesting improvements to documentation or mappings</li> <li>Proposing example use cases or general feedback</li> </ul> <p>For details, visit the Contributing page.</p> How can I contribute to the Health-RI Semantic Interoperability Initiative? <p>You can contribute by submitting structured feedback using one of our GitHub Issue Forms. We currently support the following contribution types:</p> <ul> <li>Report an error in the OntoUML or gUFO-based ontology</li> <li>Request a new concept to be added to the reference model</li> <li>Submit other input such as documentation improvements, mapping suggestions, or collaboration proposals</li> </ul> <p>Start here: Contribute via GitHub Or visit our Contributing page for more guidance.</p> Do I need to check the ontology version before submitting a contribution? <p>Yes, we ask contributors to indicate which version of the ontology or artifact they reviewed before submitting a request \u2014 especially when reporting issues or suggesting new concepts.</p> <p>This helps us avoid duplicates, understand the context of your feedback, and keep the review process efficient.</p> <p>You\u2019ll find a field for this information in the contribution forms.</p> Where can I find more information on how to submit feedback? <p>See our Contributing page, which outlines how to submit structured input, what types of feedback are accepted, and how your suggestions will be reviewed.</p> <p>All community input is tracked as GitHub Issues and reviewed by the modeling and coordination teams.</p>"},{"location":"method/","title":"Method Overview","text":""},{"location":"method/#generic-process","title":"Generic process","text":""},{"location":"method/#current-situation","title":"Current Situation","text":"<p>Health-RI serves as an intermediary that enables the nodes in its network to publish and consume data across institutions and systems. However, for this data exchange to be meaningful and analytically reliable, the data must be interpreted consistently and correctly by all parties involved.</p> <p>Addressing this challenge requires moving beyond structural or syntactic alignment. What is needed is semantic interoperability\u2014a shared understanding of the meaning behind the data being exchanged.</p> <p>As illustrated in the figure above, each node maintains its own data schema and data repository. These schemas often vary significantly in structure, terminology, and the standards or assumptions they follow. In practice, several challenges arise:</p> <ul> <li>Some schemas adhere to formal standards, while others are informally defined by the data authors themselves.</li> <li>A single schema might be influenced by multiple standards, each introducing different terminologies or modeling assumptions.</li> <li>Documentation is often incomplete or ambiguous, which leads to misunderstandings and misinterpretation when data is exchanged between nodes.</li> </ul> <p>This lack of clear, shared semantics introduces significant barriers to data integration and analysis. It increases the risk of misinterpretation, reduces confidence in the data, and ultimately limits reuse and impact.</p> <p>To address these challenges and ensure semantic alignment across Health-RI\u2019s network, we propose a new approach centered around a shared reference model.</p>"},{"location":"method/#toward-a-solution-introducing-a-common-reference-model","title":"Toward a Solution: Introducing a Common Reference Model","text":"<p>Rather than relying on isolated and potentially ambiguous schemas, we propose the creation of a Common Reference Model to serve as a shared semantic foundation across all nodes.</p> <p>This model is not intended to replace local schemas. Instead, it will serve as a semantic anchor: each schema will be expected to explicitly declare how its elements correspond to the concepts in the reference model, clarifying their intended meaning and enabling consistent interpretation.</p> <p>Note</p> <p>In practice, schemas do not need to be restructured or rewritten. Rather, they must be mapped to the reference model\u2014declaring, for each concept, its corresponding concept (or the nature of its relation) in the shared ontology.</p> <p>To be effective, the reference model must be expressed in a highly expressive modeling language\u2014one capable of making ontological commitments explicit and capturing rich semantic distinctions.</p> <p>These requirements call for the use of ontologically well-founded modeling languages, which are grounded in formal ontology and support the precise representation of complex domains. Among them, OntoUML stands out as a leading and widely adopted approach, offering both theoretical rigor and practical tooling.</p> <p>The image below illustrates the roles and technologies involved in our approach to enabling semantic interoperability. At the top, the conceptual common reference model is represented using OntoUML, providing a clear and ontologically well-founded view of the meaning of concepts. While this model supports human understanding, it is not directly usable in computational artifacts.</p> <p></p> <p>To enable computational use, the OntoUML model is transformed into a corresponding ontology implemented in gUFO, a lightweight ontology in OWL aligned with the Unified Foundational Ontology (UFO).</p> <p>Once the computational ontology is available, computational artifacts\u2014such as schemas, web ontologies, or others used for information exchange\u2014can be mapped to the gUFO-based OWL ontology. These mappings may be created by Health-RI (see mappings) or by the owners of the aligned artifacts.</p>"},{"location":"method/#division-of-responsibilities-modeling-and-mapping-teams","title":"Division of Responsibilities: Modeling and Mapping Teams","text":"<p>To operationalize the approach based on a shared reference model, Health-RI will structure the effort around two complementary teams:</p> <ul> <li>The Ontology Modeling Team</li> <li>The Ontology Mapping Team</li> </ul> <p>These teams will work in parallel to accelerate delivery while maintaining a clear division of responsibilities.</p>"},{"location":"method/#ontology-modeling-team","title":"Ontology Modeling Team","text":"<p>The Modeling Team is responsible for developing the reference model using OntoUML. Team members are expected to:</p> <ul> <li>Model domain knowledge using OntoUML with a high degree of accuracy and precision.</li> <li>Analyze and interpret technical materials, such as standards, protocols, and domain documentation.</li> <li>Engage with domain specialists to gather the necessary insights for accurate modeling.</li> </ul> <p>The team\u2019s objective is to produce a semantically rich and ontologically well-founded model that captures the essential structure and meaning of the domain.</p>"},{"location":"method/#ontology-mapping-team","title":"Ontology Mapping Team","text":"<p>The Mapping Team is responsible for linking existing data schemas from participating nodes to the reference model. This involves:</p> <ul> <li>Interpreting and understanding OntoUML models.</li> <li>Analyzing data schemas in various formats, with an emphasis on Semantic Web technologies.</li> <li>Applying best practices in concept mapping using appropriate tools and techniques.</li> <li>Utilizing the Simple Standard for Sharing Ontological Mappings (SSSOM) to document mappings in a consistent and reusable way.</li> <li>Collaborating closely with data holders, managers, and owners at each node to capture the intended meaning of schema elements.</li> </ul> <p>This team plays a critical role in ensuring that local schemas are semantically aligned with the reference model, enabling shared understanding across the network.</p>"},{"location":"method/#domain-guidance-and-coordination","title":"Domain Guidance and Coordination","text":"<p>While domain knowledge is essential, it does not need to reside within the modeling or mapping teams. Instead, a third coordinating group will provide:</p> <ul> <li>Access to domain experts and technical documentation.</li> <li>Guidance throughout the modeling and mapping processes.</li> <li>Logistical and institutional support to ensure smooth collaboration between stakeholders.</li> </ul> <p>This group ensures that the teams are supported with the necessary context and resources to perform their tasks effectively.</p>"},{"location":"method/#collaborative-iteration-and-feedback","title":"Collaborative Iteration and Feedback","text":"<p>As shown in the diagram, the Modeling and Mapping Teams operate in a collaborative feedback loop.</p> <ul> <li>The Ontology Modeling Team develops the conceptual model.</li> <li>The Ontology Mapping Team uses this model to map the local schemas.</li> <li>Insights gained during the mapping process are fed back to the modeling team.</li> </ul> <p>This feedback may include:</p> <ul> <li>Missing concepts that need to be added to the reference model.</li> <li>Redundant or unused elements that can be removed or revised.</li> <li>Ambiguities or inconsistencies that require clarification.</li> </ul> <p>This iterative cycle improves both the quality of the reference model and the precision of the mappings. Over time, it leads to a stronger, more coherent semantic framework for Health-RI and its partners.</p>"},{"location":"method/#translating-ontouml-to-owl-via-gufo","title":"Translating OntoUML to OWL via gUFO","text":"<p>While OntoUML provides the expressiveness and ontological rigor needed to build the reference model, it is designed primarily for conceptual modeling. Its focus is on producing models that support human understanding, learning, communication, and informed decision-making. As such, OntoUML models are not directly suited for computational use in Semantic Web applications or automated reasoning tasks.</p> <p>To bridge this gap, the OntoUML model must be transformed into a computational representation. This is achieved by converting the OntoUML reference model into gUFO (gentle UFO)\u2014a lightweight, computationally accessible ontology derived from UFO, the foundational ontology on which OntoUML is based.</p> <p>gUFO is implemented in the Web Ontology Language (OWL), a widely used standard for representing ontologies on the Semantic Web. This makes it compatible with existing RDF-based technologies and allows:</p> <ul> <li>The OntoUML-based reference model to be used computationally within semantic infrastructures.</li> <li>Semantic mappings from node-level RDF-based schemas to be aligned directly with the OWL representation of the model.</li> </ul> <p>By converting OntoUML models into gUFO-compliant OWL ontologies, we ensure that the semantics captured during conceptual modeling are retained, while also enabling their technical integration into semantic web systems and interoperability workflows.</p>"},{"location":"method/mapping-set/","title":"SSSOM Mapping Set","text":"<p>One of the key deliverables of the Health-RI Semantic Interoperability Initiative is a SSSOM mapping set. This mapping set is manually curated, reflecting the efforts of both the dedicated mapping team and external collaborators. For the conceptual background and rationale behind our mappings, see the Mapping Strategy.</p> <p>This page documents the mappings curated and published by Health-RI. Partners may also embed mappings directly into their own ontologies, as explained in the Mapping Strategy.</p>"},{"location":"method/mapping-set/#permanent-uris","title":"Permanent URIs","text":"<p>We offer several stable and accessible URIs for accessing the mapping set in different formats:</p> <ul> <li><code>https://github.com/Health-RI/semantic-interoperability/mappings</code> \u2014 Redirects to the TTL version of the SSSOM mappings.</li> <li><code>https://github.com/Health-RI/semantic-interoperability/mappings/ttl</code> \u2014 Redirects to the TTL version of the SSSOM mappings.</li> <li><code>https://github.com/Health-RI/semantic-interoperability/mappings/tsv</code> \u2014 Redirects to the TSV version of the SSSOM mappings.</li> </ul>"},{"location":"method/mapping-set/#versioning-strategy","title":"Versioning Strategy","text":"<p>Unlike the Health-RI Ontology (which may use semantic versioning or other schemes), the mapping set versioning is based on the YYYY-MM-DD format, corresponding to its publication date. There will be at most one version released per day.</p> <p>Importantly, mappings cannot be removed once they\u2019re published. To revise a mapping (e.g., if it was erroneous or needs replacement), we use the <code>replaces</code> field to refer back to the original entry that the new one supersedes.</p>"},{"location":"method/mapping-set/#sssom-file-schema","title":"SSSOM File Schema","text":"<p>Below is the schema for the SSSOM TSV file, with each field\u2019s link to the specification, expected datatype, cardinality, mandatory status, a concise description, and an illustrative example:</p> Field Type Cardinality Mandatory Description Example Provided by record_id EntityReference 1 Yes Unique ID of the mapping record <code>http://health-ri.org/mappings/rec123</code> Curator subject_id EntityReference 1 Yes Identifier of the subject entity <code>fhir:Patient</code> Contributor subject_label String 0..1 No Label of the subject entity <code>Patient</code> Contributor predicate_id EntityReference 1 Yes Relation linking subject and object <code>hriv:hasSemantics</code> Contributor predicate_modifier PredicateModifierEnum 0..1 No A modifier for negating the predicate<sup>1</sup> <code>Not</code> Contributor (Optional) object_id EntityReference 1 Yes Identifier of the object entity <code>hrio:Person</code> Contributor object_label String 0..1 No Label of the object entity <code>Person</code> Contributor object_category String 0..1 No OntoUML stereotype of the object <code>Kind</code> Contributor mapping_justification EntityReference 1 Yes Method or rationale for creating a mapping<sup>2</sup> <code>semapv:ManualMappingCuration</code> Contributor (or Default) author_id EntityReference(s) 1..* Yes Identifier(s) of who created the mapping <code>orcid:0000-0003-2736-7817</code> Contributor author_label String(s) 0..* No Name(s) of the mapping author(s) <code>Pedro P. F. Barcelos</code> Contributor reviewer_id EntityReference(s) 0..* No Identifier(s) of mapping reviewer(s) <code>orcid:0000-0001-2345-6789</code> Contributor reviewer_label String(s) 0..* No Name(s) of the mapping reviewer(s) <code>Jane Doe</code> Contributor creator_id EntityReference 1 Yes Agent responsible for publishing the mapping <code>https://w3id.org/health-ri/semantic-interoperability</code> System (Fixed) creator_label String 1 Yes Name of the publishing agent <code>Health-RI Semantic Interoperability</code> System (Fixed) license NonRelativeURI 1 Yes License governing mapping use <code>https://creativecommons.org/licenses/by/4.0/</code> Contributor (or Default) subject_type EntityTypeEnum 0..1 No Type of the subject entity <code>owl:Class</code> Contributor subject_source EntityReference 0..1 No Source vocabulary of the subject entity <code>fhir:http://hl7.org/fhir</code> Contributor subject_source_version String 0..1 No Version of the subject source <code>R4</code> Contributor object_source EntityReference 1 Yes Source vocabulary of the object<sup>3</sup> <code>hrio:http://w3id.org/health-ri/ontology/v0.9.1</code> Contributor (or Default) mapping_date Date 1 Yes Date when mapping was created (format: YYYY-MM-DD) <code>2025-07-02</code> Contributor publication_date Date 1 Yes Date when mapping was published (format: YYYY-MM-DD) <code>2025-07-30</code> System (Generated) replaces EntityReference(s) 0..* No Indicates that this mapping record replaces another <code>http://health-ri.org/mappings/rec122</code> Contributor isReplacedBy EntityReference(s) 0..* No Indicates that this mapping record is replaced by another<sup>4</sup> <code>http://health-ri.org/mappings/rec124</code> System (Generated) comment String 0..1 No Free-text notes about the mapping <code>Reviewed for consistency with ontology v0.9.1.</code> Contributor"},{"location":"method/mapping-set/#responsibility-legend","title":"Responsibility Legend","text":"<p>The following legend explains who is responsible for providing or assigning each field in the schema, clarifying whether values come from contributors, curators, or are system-generated:</p> <ul> <li>Contributor \u2013 Must be provided in PRs.</li> <li>Curator \u2013 Added manually by Health-RI curators.</li> <li>Contributor (or Default) \u2013 Contributor should provide this; if omitted, the system assigns a default.</li> <li>System (Fixed) \u2013 Always set to a fixed value, cannot be changed.</li> <li>System (Generated) \u2013 Automatically assigned at publication time, not editable.</li> </ul>"},{"location":"method/mapping-set/#type-legend","title":"Type Legend","text":"<p>The following table lists and defines all datatypes used in the schema above, according to the SSSOM specification:</p> Type Definition Example EntityReference A CURIE or URI referring to an entity in a vocabulary or ontology. <code>fhir:Patient</code> EntityReference(s) One or more CURIEs or URIs referring to entities in vocabularies or ontologies. <code>orcid:0000-0003-2736-7817 \\| orcid:0000-0001-2345-6789</code> String A literal string value, typically plain text. <code>Patient</code> String(s) One or more literal string values, typically plain text. <code>Pedro P. F. Barcelos \\| Jane Doe</code> NonRelativeURI An absolute URI (non-relative), typically identifying a web resource. <code>https://creativecommons.org/licenses/by/4.0/</code> EntityTypeEnum A controlled vocabulary of entity types (e.g., <code>owl:Class</code>, <code>rdf:Property</code>). <code>owl:Class</code> Date A calendar date in ISO 8601 format (YYYY-MM-DD). <code>2025-07-02</code>"},{"location":"method/mapping-set/#default-values","title":"Default Values","text":"<p>Some fields in the schema have predefined default values automatically assigned when contributors do not provide them:</p> <ul> <li>mapping_justification \u2013 Defaults to <code>semapv:ManualMappingCuration</code></li> <li>license \u2013 Defaults to <code>https://creativecommons.org/licenses/by/4.0/</code></li> <li>object_source \u2013 Defaults to <code>http://w3id.org/health-ri/ontology</code></li> </ul>"},{"location":"method/mapping-set/#how-to-contribute","title":"How to Contribute","text":"<p>We welcome contributions to expand and refine the mapping set. You can contribute in two ways:</p> <ol> <li> <p>Preferred: Submit the Issue Form    Use our SSSOM mapping issue form to add a single mapping row. Fill in the required fields and submit; Health-RI curators will review and integrate your contribution.</p> </li> <li> <p>Alternative: Use the Excel template </p> </li> </ol> <p>Download the XLSX template and enter:</p> <ul> <li>the mapping row(s) in the mappings sheet, and  </li> <li>all CURIE prefix bindings in the prefix sheet.</li> </ul> <p>Attach the completed file to a new issue and we\u2019ll review and add it. In the template, all mandatory fields's headers are in black background, while the optional ones are in green.</p> <p>Both methods ensure your contribution is reviewed and incorporated into the official Health-RI SSSOM mapping set.</p>"},{"location":"method/mapping-set/#submission-checklist-for-contributors","title":"Submission checklist (for contributors)","text":"<p>Before submitting, please verify the following to ensure your contribution is complete and compliant with the schema:</p> <ul> <li>All mandatory contributor fields are present and correctly formatted.</li> <li>Any optional values provided use valid identifiers (e.g., ORCIDs, resolvable URIs, SEMAPV terms).</li> <li>If pinning a version, <code>object_source</code> is a specific version URI (not a generic one).</li> </ul> <ol> <li> <p>May either be set to <code>Not</code> (its only valid value) or left empty. It is used specifically to express a negated mapping predicate.\u00a0\u21a9</p> </li> <li> <p>Currently, the only acceptable value for <code>mapping_justification</code> is <code>semapv:ManualMappingCuration</code>, or a comparable alternative subject to curator evaluation. This constraint is essential for maintaining the necessary semantic alignment.\u00a0\u21a9</p> </li> <li> <p>When using the default, it always resolves to the Health-RI ontology (latest version). If contributors provide a value, it must be either a specific version URI or the latest version URI.\u00a0\u21a9</p> </li> <li> <p>It is automatically calculated and asserted at publication time. When a new mapping entry uses the <code>replaces</code> field to supersede an older one, the system assigns the corresponding <code>isReplacedBy</code> value to the replaced entry, ensuring both directions of the relation are represented.\u00a0\u21a9</p> </li> </ol>"},{"location":"method/mapping-strategy/","title":"Semantic Mapping Strategy","text":"<p>Disclaimer</p> <p>While efforts have been made to ensure accuracy, the material in this page is still under review and may contain inaccuracies or omissions. Users are advised to interpret and apply the content with caution.</p>"},{"location":"method/mapping-strategy/#model-driven-techniques-mda-mdd-and-mde","title":"Model-Driven Techniques: MDA, MDD, and MDE","text":"<p>The Model-Driven Architecture (MDA), defined by the Object Management Group (OMG), is an architectural framework that structures system modeling into abstract layers\u2014promoting interoperability, portability, and reuse by separating domain concerns from technical implementation [1, 2].</p> <ul> <li>Model-Driven Development (MDD) denotes development processes guided by high-level models; MDA is one such OMG-conforming realization [2].</li> <li>Model-Driven Engineering (MDE) is an overarching paradigm including model creation, transformation, code generation, reverse-engineering, and lifecycle evolution [2].</li> </ul> <p>OMG defines three main abstraction layers [1, 2]:</p> <ul> <li>Computation-Independent Model (CIM): captures domain context and system requirements in business terms, without specifying implementation structure.</li> <li>Platform-Independent Model (PIM): defines structural and behavioral aspects\u2014such as classes and relationships\u2014in a technology-agnostic way, without committing to any particular implementation platform.</li> <li>Platform-Specific Model (PSM): refines the PIM with technology-specific information (e.g. database schemas, APIs, frameworks) to enable implementation.</li> </ul>"},{"location":"method/mapping-strategy/#cim-and-pim-in-our-ontology-artifacts","title":"CIM and PIM in Our Ontology Artifacts","text":"<p>Within our semantic interoperability framework:</p> <ul> <li>The OntoUML ontology sits at the CIM layer: it defines conceptual domain entities and relationships grounded in the Unified Foundational Ontology (UFO) [3].</li> <li>The gUFO representation (OWL-based lightweight implementation of UFO) resides at the PIM layer: it expresses those same concepts as an executable OWL 2 DL ontology, suitable for reasoning and integration with Semantic Web tools [3].</li> </ul> <p> Figure 1: OntoUML at the CIM layer defines the semantics that are implemented in gUFO/OWL at the PIM layer.</p> <p>This visual clarifies that OntoUML provides the conceptual meaning, which the gUFO artifact operationalizes\u2014while preserving semantic integrity across layers.</p>"},{"location":"method/mapping-strategy/#roles-of-the-artifacts","title":"Roles of the Artifacts","text":"Artifact Layer Purpose Practical Role OntoUML CIM Provides clarity about domain-specific concepts by offering clear and precise definitions, supporting conceptual validation and enabling expert communication Serves as a semantic map and meaning contract to align domain terms for interoperability gUFO (OWL) PIM Provides machine-readable semantics, supporting automated reasoning and tool interoperability Enables integration and alignment of RDF-based artifacts within semantic web and linked data contexts <p>Maintaining both artifacts ensures clear traceability from domain concepts (OntoUML/CIM) to executable ontology structures (gUFO/PIM) [3].</p>"},{"location":"method/mapping-strategy/#semantic-reference-defining-cim-to-pim-semantics","title":"Semantic Reference: Defining CIM-to-PIM Semantics","text":"<p>In the Health-RI architecture, every class in the gUFO ontology (PIM) is implicitly semantically defined by its counterpart in OntoUML (CIM). For example, the class <code>hrio:Person</code> in gUFO borrows its semantics from the <code>Person</code> class in the OntoUML model. Because the CIM is not computational, this semantic linkage remains implicit and is not formally encoded [3].</p> <p>Why the CIM-PIM link matters</p> <p>Even though the OntoUML model is not executable, it defines the core meaning that gUFO classes implement. This semantic grounding improves trust, clarity, and alignment in data integration.</p>"},{"location":"method/mapping-strategy/#aligning-third-party-ontologies","title":"Aligning Third-Party Ontologies","text":"<p>Our common reference model provides authoritative semantics to external concept definitions. When another ontology defines <code>onto:Person</code>, it may be semantically aligned with our <code>hrio:Person</code>. To make this relationship explicit, a <code>hriv:isExactMeaningOf</code> link can be asserted\u2014either by the Health-RI mapping team (e.g., in SSSOM format), or by the owners of the external ontology within their artifact\u2014signifying that the external concept carries the same meaning.</p> <p>There are two possible approaches for creating and maintaining such mappings:</p> <ul> <li> <p>Mappings performed by the Health-RI team: In this case, mappings are created by Health-RI's semantic modeling team and provided in SSSOM format. This is the default strategy when the external ontology or resource is publicly available or beyond Health-RI\u2019s editorial control (e.g., national standards, web-accessible vocabularies). These mappings are non-invasive, meaning they do not alter the original artifacts but describe their alignment externally. For details on how these mappings are published, versioned, and curated, see the SSSOM Mapping Set.</p> </li> <li> <p>Mappings authored by external partners: If the external artifact is under the editorial responsibility of a partner or collaborating organization, that party may directly include the mappings within their ontology. In this case, the mappings are embedded into the source artifact itself (e.g., adding <code>hriv:isExactMeaningOf</code> to their RDF model pointing to Health-RI concepts), offering tighter integration and long-term maintainability by the artifact owner.</p> </li> </ul> <p>These complementary approaches enable semantic alignment in both centrally controlled and federated interoperability scenarios.</p> <p>View Current Mappings</p> <p>For a list of the mappings created by the Health-RI team, see the Mappings page.</p> <p>Info</p> <p>For details about the schema and contribution process, see the SSSOM Mapping Set.</p> <p>Only one <code>hriv:isExactMeaningOf</code> allowed</p> <p>Each concept may have exactly one <code>hriv:isExactMeaningOf</code> to a Health-RI concept\u2014and only when a perfect semantic equivalence exists. Using more than one <code>hriv:isExactMeaningOf</code> for the same concept is not allowed, as it introduces ambiguity.</p> <p> Figure 2: If an external ontology defines <code>External:Patient</code> which we map via <code>hriv:isExactMeaningOf</code> to <code>hrio:Patient</code>\u2014and <code>hrio:Patient</code> derives its semantics from the OntoUML <code>Patient</code> concept\u2014then we can interpret <code>External:Patient</code> as conveying the same semantics as the <code>OntoUML Patient</code> concept.</p>"},{"location":"method/mapping-strategy/#mapping-properties-for-cross-scheme-alignment","title":"Mapping Properties for Cross-Scheme Alignment","text":"<p>The Health-RI Mapping Vocabulary was created to provide a set of mapping properties designed for expressing alignments between concepts in different concept schemes (e.g. external vocabularies and our Health-RI ontology). The principal properties are: <code>hriv:isExactMeaningOf</code>, <code>hriv:hasBroaderMeaningThan</code>, and <code>hriv:hasNarrowerMeaningThan</code>.</p>"},{"location":"method/mapping-strategy/#our-strategy-choosing-the-right-mapping-property","title":"Our Strategy: Choosing the Right Mapping Property","text":"<ul> <li><code>hriv:isExactMeaningOf</code> is used when the external concept is fully equivalent in meaning to our reference concept.</li> <li>Each external concept may have only one <code>hriv:isExactMeaningOf</code>.</li> <li><code>hriv:hasBroaderMeaningThan</code> is used when the external concept is broader than our reference concept (i.e., it includes our concept and possibly more).</li> <li><code>hriv:hasNarrowerMeaningThan</code> is used when the external concept is narrower than our reference concept (i.e., it captures a more specific notion).</li> </ul> <p>Clarifying hriv:isExactMeaningOf semantics</p> <p>Although <code>hriv:isExactMeaningOf</code> can be treated like a strong semantic alignment in meaning, it does not imply logical equivalence (such as <code>owl:equivalentClass</code>). It is intended to capture a strong semantic alignment in meaning, not in logical entailment. This allows semantic interoperability without risking unintended reasoning consequences in OWL-based systems.</p> <p>In contrast to <code>hriv:isExactMeaningOf</code>, both <code>hriv:hasNarrowerMeaningThan</code> and <code>hriv:hasBroaderMeaningThan</code> allow multiple mappings per concept to express partial or hierarchical semantic overlaps.</p> <p>These mappings are only to be used when no perfect equivalence exists and a semantic approximation must be made to the closest reference concept in the Health-RI ontology.</p>"},{"location":"method/mapping-strategy/#visual-example-exact-semantic-alignment","title":"Visual Example: Exact Semantic Alignment","text":"<p> Figure 3: External ontologies (e.g., HealthCare and Veterinary) map their local concepts to reference concepts in the Health-RI Ontology via <code>hriv:isExactMeaningOf</code> (red). These reference concepts are also semantically structured via <code>rdfs:subClassOf</code> (brown), enabling consistent classification across domains.</p> <p>This figure illustrates how concepts such as <code>hc:Patient</code> and <code>vet:Patient</code> are mapped to <code>hrio:HealthcarePatient</code> and <code>hrio:VeterinaryPatient</code> respectively. These are in turn subsumed by higher-level concepts like <code>hrio:Human</code> or <code>hrio:NonHumanAnimal</code>, ultimately aligning under <code>hrio:Animal</code>. This modeling strategy ensures that semantic alignments preserve domain distinctions while enabling unified interpretation under a shared reference ontology.</p> <p>How to assert an exact match in your OWL file</p> <p>To assign that a concept in your ontology has its semantics defined by a concept in the latest version of the Health-RI Ontology, use <code>hriv:isExactMeaningOf</code> as shown below:</p> <ul> <li><code>hc:Patient hriv:isExactMeaningOf &lt;https://w3id.org/health-ri/ontology#HealthcarePatient&gt; .</code></li> </ul> <p>Or, if you've defined the prefix <code>hrio: &lt;https://w3id.org/health-ri/ontology#&gt;</code>, you can simply write:</p> <ul> <li><code>hc:Patient hriv:isExactMeaningOf hrio:HealthcarePatient .</code></li> </ul> <p>To align with a specific version of a Health-RI Ontology's concept (e.g., <code>v2.0.0</code>), use:</p> <ul> <li><code>hc:Patient hriv:isExactMeaningOf &lt;https://w3id.org/health-ri/ontology/v2.0.0#HealthcarePatient&gt; .</code></li> </ul>"},{"location":"method/mapping-strategy/#visual-example-broader-and-narrower-semantic-alignments","title":"Visual Example: Broader and Narrower Semantic Alignments","text":"<p> Figure 4: Mapping external concepts from GeneralHealth and PetVeterinary ontologies to the Health-RI ontology. This example evolves from Figure 3 by incorporating <code>hriv:hasNarrowerMeaningThan</code> (magenta) and <code>hriv:hasBroaderMeaningThan</code> (blue) mappings in addition to <code>hriv:isExactMeaningOf</code> (red).</p> <ul> <li><code>ghc:Patient</code> and <code>pvet:Patient</code> are both linked via <code>hriv:hasBroaderMeaningThan</code> to <code>hrio:VeterinaryPatient</code>, indicating that each of these patients represents a has a broader meaning than the concept patient in the Health-RI ontology.</li> <li><code>pvet:PetAnimal</code> is linked via <code>hriv:hasNarrowerMeaningThan</code> to <code>hrio:NonHumanAnimal</code>, signaling that the external concept has narrower meaning.</li> <li>The figure also maintains <code>hriv:isExactMeaningOf</code> mappings for concepts that are fully equivalent (e.g., <code>ghc:Animal</code> and <code>hrio:Animal</code>).</li> <li>Internal hierarchical structure is preserved via <code>rdfs:subClassOf</code> to allow consistent classification across ontologies.</li> </ul> <p>This more flexible mapping strategy supports gradual alignment of external ontologies to our reference model even in cases where semantic overlap is partial rather than complete.</p> <p>How to assert broader or narrower mappings in your OWL file</p> <p>After having defined the <code>hri</code> prefix, to express an approximate mapping using <code>hriv:hasNarrowerMeaningThan</code> or <code>hriv:hasBroaderMeaningThan</code>, use:</p> <ul> <li><code>ghc:Patient hriv:hasBroaderMeaningThan hrio:VeterinaryPatient .</code></li> <li><code>pvet:PetAnimal hriv:hasNarrowerMeaningThan hrio:NonHumanAnimal .</code></li> </ul> <p>You may also reference a specific version using the full ontology's URI (e.g., for v2.0.0):</p> <ul> <li><code>ghc:Patient hriv:hasBroaderMeaningThan &lt;https://w3id.org/health-ri/ontology/v2.0.0#VeterinaryPatient&gt; .</code></li> </ul>"},{"location":"method/mapping-strategy/#visual-example-completing-the-ontology-via-semantic-gaps","title":"Visual Example: Completing the Ontology via Semantic Gaps","text":"<p> Figure 5: Following the scenario from Figure 4, new intermediate concepts (in green) were added to the Health-RI ontology to bridge semantic gaps and enable the replacement of approximate mappings (<code>hriv:hasNarrowerMeaningThan</code>, <code>hriv:hasBroaderMeaningThan</code>) with exact ones.</p> <p>In cases where an external ontology cannot be mapped via <code>hriv:isExactMeaningOf</code> due to a lack of equivalent concepts, we encourage internal teams and external partners to contact the Health-RI modeling team. By collaboratively extending the reference ontology with missing intermediate concepts, we support:</p> <ul> <li>The replacement of <code>hriv:hasNarrowerMeaningThan</code> and <code>hriv:hasBroaderMeaningThan</code> with <code>hriv:isExactMeaningOf</code>,</li> <li>A more complete and semantically precise reference model,</li> <li>And clearer, more actionable mappings for downstream reasoning and integration.</li> </ul> <p>In the figure above, concepts like <code>hrio:PetVet.Patient</code> and <code>hrio:PetAnimal</code> were introduced to bridge the gap between <code>pvet:Patient</code>/<code>pvet:PetAnimal</code> and broader Health-RI categories. These new concepts enable the creation of precise <code>hriv:isExactMeaningOf</code> relationships, improving the coherence and utility of both the reference ontology and the external ontology being mapped.</p>"},{"location":"method/mapping-strategy/#references","title":"References","text":"<p> [1] Object Management Group. MDA Guide rev. 2.0. OMG Document ormsc/14-06-01, 2014. Access [2] Brambilla, M., Cabot, J., Wimmer, M. Model-Driven Software Engineering in Practice. Morgan &amp; Claypool, 2017.  [3] Guizzardi, G. On Ontology, Ontologies, Conceptualizations and the Reality of Categories. Applied Ontology, 16(2), 2021.</p>"},{"location":"method/permanent-ids/","title":"Permanent Identifiers (PIDs)","text":"<p>This page lists the persistent, stable, and dereferenceable identifiers (PIDs) established by the Health-RI Semantic Interoperability Initiative. These URIs support semantic interoperability, long-term accessibility, and alignment with FAIR principles.</p>"},{"location":"method/permanent-ids/#initiative-wide-identifier","title":"Initiative-Wide Identifier","text":""},{"location":"method/permanent-ids/#uri-httpsw3idorghealth-risemantic-interoperability","title":"URI: <code>https://w3id.org/health-ri/semantic-interoperability</code>","text":"<p>This URI refers to the Semantic Interoperability Initiative as a whole. It provides persistent access to the initiative\u2019s public-facing resources and is suitable for citing the initiative in publications, websites, and metadata records.</p>"},{"location":"method/permanent-ids/#ontology-identifier","title":"Ontology Identifier","text":""},{"location":"method/permanent-ids/#uri-httpsw3idorghealth-riontology","title":"URI: <code>https://w3id.org/health-ri/ontology</code>","text":"<p>This is the main identifier for the Health-RI Ontology, which always resolves to the ontology's most recent version.</p>"},{"location":"method/permanent-ids/#identifiers-for-the-latest-ontology-version","title":"Identifiers for the Latest Ontology Version","text":"<p>These URIs point to the most recent release of the Health-RI Ontology and related documentation formats. The different URIs support HTTP content negotiation to serve either machine-readable ontology files (e.g., Turtle) or human-readable documentation (HTML specification).</p> PID Description <code>/ontology/ttl</code> OWL ontology in Turtle format <code>/ontology/specification</code> HTML rendering of the ontology specification <code>/ontology/documentation</code> Markdown documentation (raw version) <code>/ontology/json</code> OntoUML model exported as JSON <code>/ontology/vpp</code> OntoUML model file in Visual Paradigm format <p>Each of these URIs redirects to the latest available version of the resource.</p> <p>Tip</p> <p>You can use either <code>/doc</code> or <code>/documentation</code>, and <code>/spec</code> or <code>/specification</code> \u2014 both forms are valid and equivalent.</p>"},{"location":"method/permanent-ids/#identifiers-for-versioned-ontology-releases","title":"Identifiers for Versioned Ontology Releases","text":"<p>To support traceability and reproducibility, each ontology release is also available via version-specific URIs. Each versioned release of the Health-RI Ontology is identified by its own dedicated URI in the format <code>https://w3id.org/health-ri/ontology/vX.Y.Z</code>. This URI is used as the <code>owl:versionIRI</code> in the ontology metadata.</p>"},{"location":"method/permanent-ids/#format","title":"Format","text":"<p><code>https://w3id.org/health-ri/ontology/vX.Y.Z/{format}</code></p> <p>Where:</p> <ul> <li><code>X.Y.Z</code> is the semantic version (e.g., <code>2.0.0</code>)</li> <li> <p><code>{format}</code> is one of:</p> </li> <li> <p><code>ttl</code> \u2014 OWL ontology (Turtle)</p> </li> <li><code>vpp</code> \u2014 OntoUML model (Visual Paradigm)</li> <li><code>json</code> \u2014 OntoUML model (JSON)</li> <li><code>documentation</code> \u2014 Markdown documentation</li> <li><code>specification</code> \u2014 HTML specification</li> </ul> <p>Tip</p> <p>You can also use the version URI without a <code>{format}</code> (e.g., <code>/v0.6.0</code>) to directly access the <code>.ttl</code> file.</p>"},{"location":"method/permanent-ids/#examples","title":"Examples","text":"<ul> <li> <p><code>https://w3id.org/health-ri/ontology/v0.6.0/ttl</code>   \u2192 Ontology in Turtle format for version 0.6.0</p> </li> <li> <p><code>https://w3id.org/health-ri/ontology/v0.6.0/vpp</code>   \u2192 Visual Paradigm project file for version 0.6.0</p> </li> <li> <p><code>https://w3id.org/health-ri/ontology/v0.9.1/documentation</code>   \u2192 Markdown documentation for version 0.9.1</p> </li> <li> <p><code>https://w3id.org/health-ri/ontology/v0.6.0/specification</code>   \u2192 HTML specification for version 0.6.0</p> </li> </ul>"},{"location":"method/permanent-ids/#sssom-mappings-pids","title":"SSSOM Mappings (PIDs)","text":"<p>The following PIDs provide stable access to the latest SSSOM mapping set produced by the initiative, in both Turtle (TTL) and TSV formats.</p>"},{"location":"method/permanent-ids/#latest-mappings","title":"Latest Mappings","text":"<ul> <li> <p>URI (default/TTL): <code>https://w3id.org/health-ri/semantic-interoperability/mappings</code> (also available explicitly as <code>/mappings/ttl</code>)</p> </li> <li> <p>URI (TSV): <code>https://w3id.org/health-ri/semantic-interoperability/mappings/tsv</code></p> </li> </ul> <p>These PIDs redirect to the canonical files in the Health-RI GitHub repository (branch <code>main</code>), ensuring that citations remain stable while the underlying files can be updated as needed.</p>"},{"location":"method/permanent-ids/#examples_1","title":"Examples","text":"<ul> <li> <p><code>https://w3id.org/health-ri/semantic-interoperability/mappings</code>   \u2192 Latest SSSOM mappings in Turtle (<code>.ttl</code>)</p> </li> <li> <p><code>https://w3id.org/health-ri/semantic-interoperability/mappings/tsv</code>   \u2192 Latest SSSOM mappings in TSV (<code>.tsv</code>)</p> </li> </ul>"},{"location":"method/permanent-ids/#mapping-vocabulary-pids","title":"Mapping Vocabulary (PIDs)","text":"<p>The Health-RI Mapping Vocabulary defines terms used in our mapping work. The PIDs below provide stable access to the latest vocabulary and to versioned snapshots.</p>"},{"location":"method/permanent-ids/#latest-vocabulary","title":"Latest Vocabulary","text":"<ul> <li> <p>URI (TTL): <code>https://w3id.org/health-ri/mapping-vocabulary</code> (also available explicitly as <code>/mapping-vocabulary/ttl</code>)</p> </li> <li> <p>URI (HTML specification): <code>https://w3id.org/health-ri/mapping-vocabulary/specification</code> (alias: <code>/mapping-vocabulary/spec</code>)</p> </li> </ul> <p>Tip</p> <p>Both <code>/spec</code> and <code>/specification</code> are valid and equivalent for the vocabulary specification.</p>"},{"location":"method/permanent-ids/#examples_2","title":"Examples","text":"<ul> <li> <p><code>https://w3id.org/health-ri/mapping-vocabulary</code>   \u2192 Latest vocabulary in Turtle (<code>.ttl</code>)</p> </li> <li> <p><code>https://w3id.org/health-ri/mapping-vocabulary/spec</code>   \u2192 Latest HTML specification</p> </li> </ul>"},{"location":"method/permanent-ids/#versioned-vocabulary","title":"Versioned Vocabulary","text":"<p>Versioned PIDs follow semantic versioning and resolve to immutable artifacts for that release.</p> <ul> <li> <p>URI (TTL): <code>https://w3id.org/health-ri/mapping-vocabulary/vX.Y.Z</code> (also available explicitly as <code>/vX.Y.Z/ttl</code>)</p> </li> <li> <p>URI (HTML specification): <code>https://w3id.org/health-ri/mapping-vocabulary/vX.Y.Z/specification</code> (alias: <code>/vX.Y.Z/spec</code>)</p> </li> </ul>"},{"location":"method/permanent-ids/#examples_3","title":"Examples","text":"<ul> <li> <p><code>https://w3id.org/health-ri/mapping-vocabulary/v1.0.0</code>   \u2192 Vocabulary in Turtle for version <code>v1.0.0</code></p> </li> <li> <p><code>https://w3id.org/health-ri/mapping-vocabulary/v1.0.0/spec</code>   \u2192 HTML specification for version <code>v1.0.0</code></p> </li> </ul>"},{"location":"method/permanent-ids/#overview-of-persistent-identifiers","title":"Overview of Persistent Identifiers","text":"PID Description Behavior Example <code>/ontology</code> Ontology root Content negotiation (RDF or HTML) https://w3id.org/health-ri/ontology <code>/ontology/ttl</code> Latest ontology in Turtle format Redirects to raw <code>.ttl</code> file https://w3id.org/health-ri/ontology/ttl <code>/ontology/specification</code> Latest HTML specification Human-readable documentation https://w3id.org/health-ri/ontology/specification <code>/ontology/documentation</code> Markdown documentation Redirects to <code>.md</code> https://w3id.org/health-ri/ontology/documentation <code>/ontology/json</code> Latest JSON export of OntoUML Redirects to <code>.json</code> https://w3id.org/health-ri/ontology/json <code>/ontology/vpp</code> Latest OntoUML model (<code>.vpp</code>) Redirects to Visual Paradigm file https://w3id.org/health-ri/ontology/vpp <code>/ontology/vX.Y.Z/{format}</code> Versioned ontology release Format-specific persistent access https://w3id.org/health-ri/ontology/v0.6.0/ttl <code>/semantic-interoperability</code> Project-level identifier Redirects to documentation site https://w3id.org/health-ri/semantic-interoperability <code>/semantic-interoperability/git</code> Source code and data repository Redirects to GitHub https://w3id.org/health-ri/semantic-interoperability/git <code>/semantic-interoperability/mappings</code> Latest SSSOM mappings (TTL) Redirects to latest <code>.ttl</code> https://w3id.org/health-ri/semantic-interoperability/mappings <code>/semantic-interoperability/mappings/ttl</code> Latest SSSOM mappings (TTL, explicit) Redirects to latest <code>.ttl</code> https://w3id.org/health-ri/semantic-interoperability/mappings/ttl <code>/semantic-interoperability/mappings/tsv</code> Latest SSSOM mappings (TSV) Redirects to latest <code>.tsv</code> https://w3id.org/health-ri/semantic-interoperability/mappings/tsv <code>/mapping-vocabulary</code> Latest Mapping Vocabulary (TTL) Redirects to latest <code>.ttl</code> https://w3id.org/health-ri/mapping-vocabulary <code>/mapping-vocabulary/ttl</code> Latest Mapping Vocabulary (TTL, explicit) Redirects to latest <code>.ttl</code> https://w3id.org/health-ri/mapping-vocabulary/ttl <code>/mapping-vocabulary/specification</code> Latest Mapping Vocabulary HTML specification Redirects to latest spec page https://w3id.org/health-ri/mapping-vocabulary/specification <code>/mapping-vocabulary/vX.Y.Z</code> Versioned Mapping Vocabulary (TTL) Redirects to version-specific <code>.ttl</code> https://w3id.org/health-ri/mapping-vocabulary/v1.0.0 <code>/mapping-vocabulary/vX.Y.Z/specification</code> Versioned Mapping Vocabulary specification Redirects to version-specific HTML spec https://w3id.org/health-ri/mapping-vocabulary/v1.0.0/specification"},{"location":"method/publication/","title":"Initiative Publications","text":"<p>This repository follows a structured and transparent publishing approach to support traceability, stability, and reuse of the Health-RI Ontology and its artifacts.</p>"},{"location":"method/publication/#versioning-policy","title":"Versioning Policy","text":"<p>We use an adapted semantic versioning scheme to indicate the type and impact of changes:</p> <p>Format: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code></p> <ul> <li>Major: Conceptual milestones or structural overhauls.</li> <li>Minor: Any scoped modifications, including additions, refinements, or reorganizations that preserve semantic compatibility.</li> <li>Patch: Fixes or clarifications that stay within the established scope (e.g., label corrections, comment improvements).</li> </ul> <p>While inspired by Semantic Versioning, this adapted strategy is tailored for ontology and conceptual model management.</p> <p>Note</p> <p>Only major versions will trigger a formal release and will have a corresponding published specification webpage. These releases are considered stable versions, and intended for broader reuse and citation.</p> <p>Info</p> <p>We adopt a fast versioning strategy: files are made available in the <code>/ontology</code> folder as soon as possible, even when they may present smaller completion or consistency issues. This enables early access and collaboration, while stability is guaranteed only for major releases.</p>"},{"location":"method/publication/#published-artifacts","title":"Published Artifacts","text":"<p>For each ontology release, the following artifacts are published \u2014 always in both <code>ontologies/latest/</code> and <code>ontologies/versioned/</code> folders.</p> <ul> <li>OntoUML conceptual model (Visual Paradigm)   Includes all OntoUML constructs and diagrams.</li> <li><code>ontologies/latest/health-ri-ontology.vpp</code></li> <li> <p><code>ontologies/versioned/health-ri-ontology-v&lt;version&gt;.vpp</code></p> </li> <li> <p>OntoUML JSON export   Conforms to the OntoUML Schema.</p> </li> <li><code>ontologies/latest/health-ri-ontology.json</code></li> <li> <p><code>ontologies/versioned/health-ri-ontology-v&lt;version&gt;.json</code></p> </li> <li> <p>gUFO OWL ontology (Turtle)   OWL serialization that imports or reflects gUFO axioms.</p> </li> <li><code>ontologies/latest/health-ri-ontology.ttl</code></li> <li> <p><code>ontologies/versioned/health-ri-ontology-v&lt;version&gt;.ttl</code></p> </li> <li> <p>Markdown documentation</p> </li> <li><code>ontologies/latest/documentations/documentation.md</code></li> <li> <p><code>ontologies/versioned/documentations/documentation-v&lt;version&gt;.md</code></p> </li> <li> <p>HTML specification</p> </li> <li><code>ontologies/latest/documentations/specification.html</code></li> <li><code>ontologies/versioned/documentations/specification-v&lt;version&gt;.html</code></li> </ul> <p>Note</p> <p>gUFO files are only generated for versions of the model that are syntactically valid. As a result, no <code>.ttl</code> file will be provided for versions that are still incomplete or under development.</p> <p>Info</p> <p>The version numbers of the <code>.vpp</code>/<code>.json</code> (OntoUML) and <code>.ttl</code> (OWL/gUFO) files are managed independently. The <code>.ttl</code> file includes a <code>dcterms:conformsTo</code> metadata relation to indicate which OntoUML version it corresponds to.</p> <p><code>&lt;https://w3id.org/health-ri/ontology#&gt; dcterms:conformsTo &lt;https://w3id.org/health-ri/ontouml-v0.3.0&gt; .</code></p> <p>Mapping Artifacts \u2013 Coming Soon</p> <p>Information about the mapping outputs will be added in a future update. Their design and structure are still under discussion and will be published once finalized.</p>"},{"location":"method/publication/#repository-structure","title":"Repository Structure","text":"<p>All current artifacts are made available in the <code>/ontologies</code> folder:</p> <pre><code>ontologies/\n\u2502\n\u251c\u2500\u2500 latest/\n\u2502   \u251c\u2500\u2500 health-ri-ontology.vpp\n\u2502   \u251c\u2500\u2500 health-ri-ontology.json\n\u2502   \u251c\u2500\u2500 health-ri-ontology.ttl\n\u2502   \u251c\u2500\u2500 documentations/\n\u2502   \u2502   \u251c\u2500\u2500 documentation.md\n\u2502   \u2502   \u2514\u2500\u2500 specification.html\n\u2502   \u2514\u2500\u2500 images/\n\u2502       \u2514\u2500\u2500 *.png   # Exported PNG images of all diagrams\n\u2502\n\u251c\u2500\u2500 versioned/\n\u2502   \u251c\u2500\u2500 health-ri-ontology-vX.Y.Z.json\n\u2502   \u251c\u2500\u2500 health-ri-ontology-vX.Y.Z.vpp\n\u2502   \u251c\u2500\u2500 health-ri-ontology-vX.Y.Z.ttl\n\u2502   \u2514\u2500\u2500 documentations/\n\u2502       \u251c\u2500\u2500 documentation-vX.Y.Z.md\n\u2502       \u2514\u2500\u2500 specification-vX.Y.Z.html\n\u2502\n\u251c\u2500\u2500 changelog.md\n\u2514\u2500\u2500 ...\n</code></pre> <p>What does 'latest' mean?</p> <p>The <code>latest/</code> folder always mirrors the contents of the highest published version. This provides stable, convenient access to the most recent files without needing to specify a version number.</p> <p>Where are the images of the diagrams?</p> <p>The <code>images/</code> folder \u2014 containing exported PNG versions of all OntoUML diagrams \u2014 is only provided under the <code>latest/</code> folder. These images are always generated from the most recent <code>.vpp</code> file and are not versioned individually.</p>"},{"location":"method/publication/#archive-and-change-history","title":"Archive and Change History","text":"<ul> <li>Only the latest version of each artifact is visible directly in the <code>ontologies/latest/</code> folder.</li> <li>All previous versions are organized in the <code>ontologies/versioned/</code> directory for transparency and reproducibility.</li> <li>A changelog file (<code>changelog.md</code>) summarizes all version changes and links them to their respective files and semantic impact.</li> <li>The changelog follows the Keep a Changelog format.</li> <li>It is generated and maintained with the support of an AI-assisted tool to ensure consistency and clarity.</li> </ul> <p>Looking for PID details?</p> <p>The full description of all Permanent Identifiers (PIDs) \u2014 including format-specific URIs for each version \u2014 is documented separately. Access the complete description at: Permanent Identifiers.</p>"},{"location":"ontology/","title":"The Health-RI Ontology","text":"<p>To be created.</p>"},{"location":"ontology/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog.</p>"},{"location":"ontology/changelog/#010-2025-06-20","title":"[0.1.0] - 2025-06-20","text":""},{"location":"ontology/changelog/#added","title":"Added","text":"<ul> <li>Initial version of the Health-RI Ontology model.</li> <li>Two main packages: <code>Gender</code> and <code>Biology</code>, each with detailed OntoUML constructs.</li> <li>Core classes under <code>Gender</code>:</li> <li><code>Person with Unassigned Sex at Birth</code></li> <li><code>Person with Assigned Sex at Birth</code>, including its specializations:<ul> <li><code>Person with Male Sex at Birth</code></li> <li><code>Person with Female Sex at Birth</code></li> <li><code>Person with Indeterminate Sex at Birth</code></li> </ul> </li> <li><code>Sex at Birth Assignment</code>, <code>Healthcare Professional</code>, <code>Birth Notification</code>, and <code>Birth-related Legislation Rule</code></li> <li>Core classes under <code>Biology</code>:</li> <li><code>Person</code>, <code>Human Cell</code>, <code>Chromosome</code>, <code>Allosome</code>, <code>Gamete</code>, <code>Diploid Cell</code>, <code>Haploid Cell</code></li> <li>Allosomal variants (<code>Allosome X</code>, <code>Allosome Y</code>) and karyotypical profiles:<ul> <li><code>Regular Karyotypical Male</code>, <code>Regular Karyotypical Female</code></li> <li><code>Variant Karyotypical Male</code>, <code>Variant Karyotypical Female</code></li> <li><code>Karyotypically Indeterminate Person</code></li> </ul> </li> <li>Use of OntoUML stereotypes including <code>kind</code>, <code>subkind</code>, <code>role</code>, <code>relator</code>, <code>mode</code>, and relations such as <code>mediation</code> and <code>componentOf</code>.</li> <li>Several generalizations and complete disjoint generalization sets:</li> <li><code>sex at birth</code>, <code>karyotypical sex</code>, <code>variant karyotypic sex</code>, <code>regular karyotypical sex</code>, <code>allosome type</code>, and others.</li> <li>Two diagrams: <code>Sex at Birth</code> and <code>Chromosomes</code>, illustrating core structural aspects of the model.</li> </ul>"},{"location":"ontology/changelog/#020-2025-06-23","title":"[0.2.0] - 2025-06-23","text":""},{"location":"ontology/changelog/#added_1","title":"Added","text":"<ul> <li>New package: <code>Legal Gender Model</code> including:</li> <li><code>Person with Unassigned Legal Gender</code></li> <li><code>Person with Legal Gender</code>, with subtypes:<ul> <li><code>Person with Male Legal Gender</code></li> <li><code>Person with Female Legal Gender</code></li> <li><code>Person with Other Legal Gender</code></li> </ul> </li> <li><code>Legal Gender Assignment</code>, <code>Government</code>, and <code>Birth Certificate</code></li> <li>Generalization set: <code>legal gender</code> (complete, disjoint) under <code>Person with Legal Gender</code></li> <li>Mediation relations:</li> <li>Between <code>Legal Gender Assignment</code> and its participants (<code>Government</code> and <code>Person</code>)</li> <li>Material relation: <code>formalizes</code> between <code>Birth Certificate</code> and <code>Legal Gender Assignment</code></li> <li>ComponentOf relations:</li> <li><code>Birth Certificate</code> composed of <code>Legal Gender Assignment</code></li> <li>Dependency from the new <code>Legal Gender Model</code> package to the <code>Gender</code> package</li> </ul>"},{"location":"ontology/changelog/#changed","title":"Changed","text":"<ul> <li>Ontology version IRI updated to reflect new release</li> <li>Improvements in naming conventions and organization of existing generalization sets for clarity and consistency</li> </ul>"},{"location":"ontology/changelog/#fixed","title":"Fixed","text":"<ul> <li>Minor alignment issues in model layout (diagrams were not affected)</li> </ul>"},{"location":"ontology/changelog/#030-2025-06-24","title":"[0.3.0] - 2025-06-24","text":""},{"location":"ontology/changelog/#added_2","title":"Added","text":"<ul> <li>New class: <code>Person with Unassigned Legal Gender or Sex at Birth</code></li> <li>Introduced as a superclass for both unassigned sex and unassigned legal gender persons.</li> <li>New generalization set: <code>legal gender or sex at birth</code> (complete, disjoint), covering:</li> <li><code>Person with Unassigned Legal Gender or Sex at Birth</code></li> <li><code>Person with Unassigned Legal Gender</code></li> <li><code>Person with Unassigned Sex at Birth</code></li> <li>Mediation relations:</li> <li>Between <code>Birth Notification</code> and <code>Person with Unassigned Legal Gender or Sex at Birth</code></li> <li>Between <code>Birth Certificate</code> and <code>Person with Unassigned Legal Gender or Sex at Birth</code></li> </ul>"},{"location":"ontology/changelog/#changed_1","title":"Changed","text":"<ul> <li>Updated generalization structures to reflect the new shared superclass for unassigned status.</li> <li>Adjusted diagram layout to accommodate new shared superclass and its associated relations.</li> </ul>"},{"location":"ontology/changelog/#040-2025-06-25","title":"[0.4.0] - 2025-06-25","text":""},{"location":"ontology/changelog/#added_3","title":"Added","text":"<ul> <li>New class: <code>Person with Assigned Legal Gender or Sex at Birth</code></li> <li>Serves as a common superclass for <code>Person with Legal Gender</code> and <code>Person with Assigned Sex at Birth</code></li> <li>New generalization set: <code>assigned legal gender or sex at birth</code> (complete, disjoint), including:</li> <li><code>Person with Assigned Legal Gender or Sex at Birth</code></li> <li><code>Person with Legal Gender</code></li> <li><code>Person with Assigned Sex at Birth</code></li> <li>New mediation relations:</li> <li>Between <code>Birth Notification</code> and <code>Person with Assigned Legal Gender or Sex at Birth</code></li> <li>Between <code>Birth Certificate</code> and <code>Person with Assigned Legal Gender or Sex at Birth</code></li> </ul>"},{"location":"ontology/changelog/#changed_2","title":"Changed","text":"<ul> <li>Generalization structure revised to include new superclass for persons with assigned statuses</li> <li>Layout adjustments in diagrams to reflect new hierarchical relationships</li> </ul>"},{"location":"ontology/changelog/#051-2025-06-30","title":"[0.5.1] - 2025-06-30","text":""},{"location":"ontology/changelog/#added_4","title":"Added","text":"<ul> <li>Class: <code>Sex</code> was introduced to the model.</li> </ul>"},{"location":"ontology/changelog/#removed","title":"Removed","text":"<ul> <li>Package: <code>Complementary</code></li> <li>Classes: <code>Biological Sex Assigner</code>, <code>Biological Sex Assignee</code>, and <code>Biological Sex Assignment</code></li> <li>Classes: <code>Social Gender</code> and <code>Administrative Gender</code></li> </ul>"},{"location":"ontology/changelog/#changed_3","title":"Changed","text":"<ul> <li>Renamed <code>Phenotypic Sex Assignment</code> to <code>Phenotypic Sex Assessment</code>.</li> <li>Renamed <code>Phenotypic Sex Assigner</code> to <code>Phenotypic Sex Assessor</code>.</li> <li>Renamed <code>Phenotypic Sex Assignee</code> to <code>Person with Assessed Phenotypic Sex</code>.</li> </ul>"},{"location":"ontology/changelog/#052-2025-06-30","title":"[0.5.2] - 2025-06-30","text":""},{"location":"ontology/changelog/#added_5","title":"Added","text":"<ul> <li>Added detailed descriptions for multiple classes in the ontology, replacing previously null values to improve clarity and documentation quality.</li> </ul>"},{"location":"ontology/changelog/#changed_4","title":"Changed","text":"<ul> <li>Updated descriptions for:</li> <li>Roles, relators, and categories related to sex and gender assignments and recognitions (e.g., Person with Assigned Sex at Birth, Legal Gender Recognizer, Administrative Gender Recognizer).</li> <li>Core biological concepts such as Chromosome, Allosome, Human Cell, Karyotypical Sex, Phenotypic Sex, and Sex at Birth.</li> <li>Traits and characteristic categories for sexual and visual dimorphic features.</li> <li>High-level categories like Sex and Gender, including Legal, Administrative, and Identity forms.</li> <li>General concepts including Person, Organization, Government, and Document.</li> <li>Improved consistency and clarity across all descriptions to support better understanding in administrative, legal, medical, and ontological contexts.</li> </ul>"},{"location":"ontology/changelog/#060-2025-07-30","title":"[0.6.0] - 2025-07-30","text":""},{"location":"ontology/changelog/#added_6","title":"Added","text":"<ul> <li>Introduced new classes to represent administrative gender assignments:</li> <li><code>Person with Male Administrative Gender</code></li> <li><code>Person with Female Administrative Gender</code></li> <li><code>Person with Non-binary Administrative Gender</code></li> <li><code>Male Administrative Gender</code>, <code>Female Administrative Gender</code>, and <code>Non-binary Administrative Gender</code></li> <li>Added new generalizations and generalization sets:</li> <li>Generalizations linking <code>Person with Administrative Gender</code> roles to <code>Person</code></li> <li>Generalizations linking administrative gender phases to the <code>Administrative Gender</code> category</li> <li>Generalization sets:<ul> <li><code>person's administrative genders</code> (complete, not disjoint)</li> <li><code>administrative gender types</code> (complete, disjoint)</li> <li><code>administrative gender characterization types</code> (complete, disjoint)</li> </ul> </li> <li>Introduced three new <code>characterization</code> relations:</li> <li>Each links one of the <code>Person with X Administrative Gender</code> roles with the corresponding <code>X Administrative Gender</code> phase</li> <li>Added names to several previously unnamed relations, such as <code>\"has administrative gender\"</code></li> </ul>"},{"location":"ontology/changelog/#changed_5","title":"Changed","text":"<ul> <li>Swapped internal OntoUML element IDs to improve structural clarity and align with internal conventions. These changes affect class and generalization identifiers but not their semantic content.</li> <li>Improved the clarity of modeling administrative gender recognition as separate from legal or self-identified gender representations.</li> <li>Reorganized the ontology structure to accommodate the new administrative gender module while preserving backward compatibility.</li> </ul>"},{"location":"ontology/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Corrected some inconsistencies in generalization references and alignment of identifiers for relations and generalizations across the administrative gender module.</li> </ul>"},{"location":"ontology/changelog/#070-2025-07-30","title":"[0.7.0] - 2025-07-30","text":""},{"location":"ontology/changelog/#changed_6","title":"Changed","text":"<ul> <li>Reassigned internal OntoUML element identifiers to improve structural consistency and tooling traceability:</li> <li>Multiple <code>id</code> values for classes, generalizations, and relations were systematically rotated or swapped.</li> <li>These changes have no impact on the logical content or semantics of the ontology but support improved internal alignment.</li> </ul>"},{"location":"ontology/changelog/#removed_1","title":"Removed","text":"<ul> <li>Class: <code>Organization</code> (previously defined as a <code>kind</code>) was removed from the ontology.</li> <li>It included a description as a structured group with roles, responsibilities, and formal authority.</li> <li>If still needed, its usage should be reintroduced in future updates or considered as part of an external reference ontology.</li> </ul>"},{"location":"ontology/changelog/#080-2025-07-30","title":"[0.8.0] - 2025-07-30","text":""},{"location":"ontology/changelog/#added_7","title":"Added","text":"<ul> <li>Introduced a new diagnostic module with comprehensive modeling of diagnostic types and roles, including:</li> <li><code>Healthcare Diagnosis</code>, <code>Clinical Diagnosis</code>, <code>Laboratory Diagnosis</code>, <code>Radiological Diagnosis</code>, <code>Administrative Coding Diagnosis</code>, <code>Epidemiological Diagnosis</code>, <code>Surveillance Diagnosis</code>, <code>Research Diagnosis</code></li> <li>Diagnosis roles such as <code>Diagnosed Biological Part</code>, <code>Diagnosed Specimen</code>, <code>Diagnosed Group</code>, and <code>Diagnosed Cellular Entity</code></li> <li><code>Conclusive Diagnostic Assessment</code>, <code>Concluded Diagnostic Relation</code>, and other related constructs</li> <li>New taxonomy and generalization sets for diagnosis classification, including:</li> <li><code>healthcare diagnosis types by source</code>, <code>healthcare diagnosis types by focus</code>, <code>healthcare diagnosis types by use</code>, <code>types of diagnosed entities</code>, and <code>cellular entity diagnosis types</code></li> <li>Introduced <code>Self-diagnosis</code>, <code>External Diagnosis</code>, and <code>Diagnosis Suspicion</code> as distinct classes</li> <li>New diagnostic relation: characterization between diagnosis suspicion and assessed condition</li> <li>Expanded health condition classification with:</li> <li><code>Traumatic Health Condition</code>, <code>Non-traumatic Health Condition</code>, <code>Risk-based Health Condition</code>, <code>Exposure-based Health Condition</code>, <code>Inherent Health Condition</code>, and <code>Injury</code></li> <li>Introduced <code>Cellular Entity</code> and its states: <code>Living Cellular Entity</code>, <code>Dead Cellular Entity</code></li> <li>New generalization sets for animal types, trauma-based health condition types, and cellular entity states</li> </ul>"},{"location":"ontology/changelog/#changed_7","title":"Changed","text":"<ul> <li>Replaced <code>Animal</code>, <code>Non-Human Animal</code>, <code>Living Animal</code>, and <code>Dead Animal</code> with an updated and more expressive <code>Cellular Entity</code> taxonomy</li> <li>Revised several stereotypes:</li> <li>Changed various <code>subkind</code> and unnamed classes to proper <code>category</code>, <code>roleMixin</code>, or <code>phaseMixin</code> stereotypes</li> <li>Updated <code>Health Condition</code> classes to clarify their nature (e.g., intrinsic vs extrinsic modes)</li> <li>Improved modeling coherence for diagnostic processes, replacing older concepts like <code>Antemortem Diagnosis</code> and <code>Postmortem Diagnosis</code> with more granular and categorized alternatives</li> </ul>"},{"location":"ontology/changelog/#removed_2","title":"Removed","text":"<ul> <li>Removed the entire <code>Animal</code> classification block including:</li> <li><code>Animal</code>, <code>Non-Human Animal</code>, <code>Living Animal</code>, <code>Dead Animal</code></li> <li>Their generalizations and generalization sets (e.g., <code>animal types</code>, <code>animal living state</code>)</li> </ul>"},{"location":"ontology/changelog/#090-2025-07-30","title":"[0.9.0] - 2025-07-30","text":""},{"location":"ontology/changelog/#added_8","title":"Added","text":"<ul> <li>New textual descriptions were added to key sections of the ontology and diagrams, improving documentation and understandability:</li> <li>Ontology-level description of sex and gender, distinguishing intrinsic and extrinsic modes and their role in formal assessment or self-identification.</li> <li>Detailed diagram descriptions for:<ul> <li>Sex at Birth, Karyotypical Sex, Phenotypic Sex</li> <li>Legal Gender, Administrative Gender, Gender Identity</li> <li>Integrated overview diagram of all sex and gender modes</li> <li>Biological Sex as a conceptual umbrella</li> </ul> </li> </ul>"},{"location":"ontology/changelog/#changed_8","title":"Changed","text":"<ul> <li>Swapped internal identifiers of several classes and generalizations to align with structural or tooling needs. These include:</li> <li>Various class IDs for <code>Person</code>, <code>Gender</code>, <code>Health Condition</code>, and diagnostic modules</li> <li>Generalization and generalization set IDs (e.g., in \"healthcare diagnosis types by use\", \"by focus\", etc.)</li> <li>These identifier changes do not affect the semantic content of the model but improve consistency and traceability in tooling pipelines.</li> </ul>"},{"location":"ontology/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Improved alignment and phrasing in existing class descriptions for Gender and Sex, especially in the documentation layer.</li> </ul>"},{"location":"ontology/changelog/#091-2025-07-30","title":"[0.9.1] - 2025-07-30","text":""},{"location":"ontology/changelog/#changed_9","title":"Changed","text":"<ul> <li>Updated internal identifiers (<code>id</code> fields) for multiple classes, relations, and generalizations to improve consistency in serialization and downstream processing. These changes do not affect the logical structure or semantics of the ontology.</li> </ul>"},{"location":"ontology/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Corrected typographic artifacts in textual descriptions for sex and gender constructs that previously used escaped HTML-like formatting (<code>**&lt;&lt;mode&gt;&gt;**</code>, <code>**&lt;&lt;phase&gt;&gt;**</code>, etc.). These are now consistently rendered.</li> <li>Minor cleanup in markdown-style syntax within descriptions, ensuring accurate rendering in downstream documentation tools.</li> </ul>"},{"location":"ontology/documentation/","title":"Health-RI Ontology","text":"<p>Version 0.9.1</p>"},{"location":"ontology/documentation/#sex-and-gender","title":"Sex and Gender","text":"<p>This document describes the OntoUML conceptual model of Sex and Gender, detailing its structure, types, and relationships. The model follows the ontological notion of &lt;&gt;, representing intrinsic properties of a Person. However, while these modes always depend on the bearer (they are properties of them), their determination can be either intrinsic depending only on the person s own features or extrinsic requiring assessment or assignment by external agents. <p>This distinction is crucial to properly model the social, legal, and biological complexity of sex and gender in human contexts.</p>"},{"location":"ontology/documentation/#persons-sex-and-gender","title":"Person's Sex and Gender","text":"<p>This integrated diagram brings together all the sex and gender modes that characterize a Person:</p> <ul> <li>Intrinsic modes: Karyotypical Sex, Gender Identity.</li> <li>Extrinsic modes: Phenotypic Sex, Sex at Birth, Administrative Gender, Legal Gender.</li> </ul> <p>It also makes explicit the mediation roles for extrinsic modes highlighting how external agents participate in assigning or recognizing these properties.</p> <p>This unified view underlines the model s goal: to provide a clear, precise, and inclusive conceptual framework that acknowledges both personal identity and social practices in defining sex and gender.</p>"},{"location":"ontology/documentation/#sex","title":"Sex","text":""},{"location":"ontology/documentation/#sex-at-birth","title":"Sex at Birth","text":"<p>Sex at birth is also modeled as an extrinsic mode, but it emphasizes its formal assignment during birth registration. While it typically relies on the newborn s phenotypical features, it is a legal and administrative act involving professionals who record this classification on official documents.</p> <p>The ontology includes:</p> <ul> <li>The Sex at Birth Assignment relator, mediating between the professional and the person.</li> <li>The roles of assigner and assignee.</li> <li>Categories for male, female, and indeterminate assignments.</li> </ul> <p>By modeling sex at birth explicitly as an assignment, the ontology makes clear that this label is not merely descriptive but socially consequential.</p>"},{"location":"ontology/documentation/#karyotypical-sex","title":"Karyotypical Sex","text":"<p>Karyotypical sex is an intrinsic mode: it depends solely on the person s genetic makeup and is present from birth. It is defined by the composition of allosomes (sex chromosomes) such as XX, XY, or variations like XXY or X0. This model distinguishes regular (XX or XY) and variant karyotypical patterns, capturing the biological diversity observed in human populations.</p> <p>In practice, karyotypical sex is often viewed as the \"genetic sex\" of a person reflecting their chromosomal configuration independently of any interpretation or assessment.</p>"},{"location":"ontology/documentation/#phenotypic-sex","title":"Phenotypic Sex","text":"<p>Phenotypic sex is an extrinsic mode: while it refers to the person's own anatomical and morphological features, it depends on external assessment by healthcare professionals. It includes visible anatomical traits such as genitalia, secondary sexual characteristics, and body morphology.</p> <p>The model explicitly includes visual sex characteristics as important cues for assessment classified as male-typical, female-typical, or indeterminate. It also models the mediation process, highlighting that phenotypic sex results from structured clinical or social evaluations.</p> <p>This concept allows us to capture the important fact that biological sex is not just about genes, but also about embodied, observable features that can vary across individuals.</p>"},{"location":"ontology/documentation/#sex_1","title":"Sex","text":"<p>Sex is modeled here as biological sex, conceptualized as a &lt;&gt; an intrinsic property of a person that depends on their biology. Importantly, the ontology acknowledges that sex is not a single, unitary notion but an umbrella for several dimensions, such as chromosomal, anatomical, phenotypical, hormonal, and gonadal sex. <p>While not all these dimensions are explicitly modeled, the ontology focuses on three representative types:</p> <ul> <li>Karyotypical Sex (intrinsic mode)</li> <li>Phenotypic Sex (extrinsic mode)</li> <li>Sex at Birth (extrinsic mode)</li> </ul> <p>This separation helps clarify that while biological sex is fundamentally about the person's body, some of its types require social practices of observation, assessment, and formal assignment.</p>"},{"location":"ontology/documentation/#gender","title":"Gender","text":"<p>Gender is also modeled as a &lt;&gt;, reflecting its intrinsic nature as a property of a person. However, the ontology carefully distinguishes intrinsic from extrinsic modes of gender: <ul> <li>Gender Identity (intrinsic): Defined and experienced by the person themselves.</li> <li>Administrative Gender (extrinsic): Assigned or recognized by organizations for institutional purposes.</li> <li>Legal Gender (extrinsic): A specialized form of administrative gender, recognized and enforced by government entities.</li> </ul> <p>This structure acknowledges that while gender always resides in the person, its recognition and categorization often involve formal social processes.</p>"},{"location":"ontology/documentation/#legal-gender","title":"Legal Gender","text":"<p>Legal Gender is an extrinsic mode and a subkind of Administrative Gender. It refers to the gender category officially recognized by a government. It typically appears in legal documents like birth certificates, IDs, or passports, and has formal consequences for rights and obligations.</p> <p>The diagram shows:</p> <ul> <li>The role of Legal Gender Recognizer (government bodies).</li> <li>Mediation via Legal Gender Recognition.</li> <li>Recognized roles: Legal Male, Legal Female, Legal Non-binary, and Unassigned.</li> </ul> <p>This modeling clarifies the distinction between personal identity and state recognition.</p>"},{"location":"ontology/documentation/#administrative-gender","title":"Administrative Gender","text":"<p>Administrative Gender generalizes the notion of formal assignment beyond governments to any organization. Hospitals, schools, and companies may record or assign gender categories for their own administrative purposes.</p> <p>The model includes:</p> <ul> <li>Organizations as Administrative Gender Recognizers.</li> <li>Mediation via Administrative Gender Recognition.</li> <li>Recognized roles for people with an administrative gender.</li> </ul> <p>By situating legal gender as a subkind of administrative gender, the model shows that state-recognized categories are just one (especially consequential) form of institutional recognition.</p>"},{"location":"ontology/documentation/#gender-identity","title":"Gender Identity","text":"<p>Gender Identity represents the intrinsic mode of gender the personally defined and experienced sense of being male, female, non-binary, or other identities. This dimension is internal to the person and does not depend on external assignment or recognition.</p> <p>The model includes:</p> <ul> <li>Male, Female, and Non-binary identities as &lt;&gt; subtypes, acknowledging that a person's gender identity can vary over time. <p>This approach supports inclusive modeling of diverse gender identities while recognizing their personal, self-defined nature.</p>"},{"location":"ontology/documentation/#biology","title":"Biology","text":""},{"location":"ontology/documentation/#chromosomes","title":"Chromosomes","text":"<p>This diagram shows how allosomes (X and Y chromosomes) combine to form the karyotypical makeup of human cells. Different allosome combinations lead to distinct karyotypical categories.</p>"},{"location":"ontology/mappings/","title":"Health-RI Mappings","text":"<p>Preliminary Mapping Examples</p> <p>The mappings provided below are illustrative examples only. They do not represent finalized alignments. The content is still under development.</p> <p>Download the full SSSOM mapping.</p> <p>This table is automatically generated from the SSSOM TSV:</p> <p></p> subject_id subject_label object_id object_label predicate_id mapping_justification author_id mapping_date fhir:birth_sex The sex of a person at birth (and recorded on the birth certificate). health-ri:SexAtBirth Sex at Birth rdfs:subClassOf semapv:ManualMappingCuration https://orcid.org/0000-0003-2736-7817 2025-07-02 omop:gender_concept_id The biological sex of a person at birth. health-ri:SexAtBirth Sex at Birth rdfs:subClassOf semapv:ManualMappingCuration https://orcid.org/0000-0003-2736-7817 2025-07-02 openehr:sex_assigned_at_birth The sex of an individual determined by anatomical characteristics observed and registered at birth. health-ri:SexAtBirth Sex at Birth rdfs:subClassOf semapv:ManualMappingCuration https://orcid.org/0000-0003-2736-7817 2025-07-02 omop:observation_concept_id_as_gender Gender (Observable entity) health-ri:Gender Gender rdfs:subClassOf semapv:ManualMappingCuration https://orcid.org/0000-0003-2736-7817 2025-07-02 openehr:administrative_gender The gender of an individual for administrative purposes. health-ri:AdministrativeGender Administrative Gender rdfs:subClassOf semapv:ManualMappingCuration https://orcid.org/0000-0003-2736-7817 2025-07-02 fhir:administrative_gender The gender of a patient for administration and record keeping purposes. health-ri:AdministrativeGender Administrative Gender rdfs:subClassOf semapv:ManualMappingCuration https://orcid.org/0000-0003-2736-7817 2025-07-02"},{"location":"ontouml-gufo/","title":"OntoUML &amp; gUFO","text":"<p>This section introduces OntoUML, an ontologically well-founded conceptual modeling language, and gUFO, its lightweight computational counterpart based on the Unified Foundational Ontology (UFO). The resources below provide background, guidance, tools, and structured content to support both the creation and practical application of OntoUML models, as well as their transformation into machine-readable OWL ontologies using gUFO.</p> <p>OntoUML</p> <ul> <li>Origins</li> <li>Documentation and Standardization Efforts</li> <li>Additional Learning Resources</li> <li>Adoption and Influence</li> <li>Supporting Tools and Developments</li> <li>References</li> </ul> <p>OntoUML Stereotypes</p> <ul> <li>Class Stereotypes</li> <li>Relationship Stereotypes</li> <li>References</li> </ul> <p>How to Create an OntoUML Model</p> <ul> <li>Installation Guide for Visual Paradigm and the OntoUML Plugin</li> <li>Step 1: Install Visual Paradigm</li> <li>Step 2: Install the OntoUML Plugin</li> <li>Step 3: Create an OntoUML Diagram</li> <li>Additional Features of the Plugin</li> </ul> <p>OntoUML/UFO Catalog</p> <ul> <li>Access and Structure</li> <li>Directory Structure Overview</li> <li>Catalog's Persistent URLs</li> <li>References</li> </ul> <p>gUFO</p> <ul> <li>What is gUFO?</li> <li>Why was gUFO created?</li> <li>Where is gUFO used?</li> <li>When was gUFO developed?</li> <li>How does gUFO work?</li> <li>How to Create a gUFO Ontology</li> <li>References</li> </ul>"},{"location":"ontouml-gufo/gufo/","title":"gentle UFO (gUFO)","text":"<p>The 'gentle Unified Foundational Ontology', or simply gUFO, is a simplified and lightweight version of the Unified Foundational Ontology (UFO). It was designed to make ontology-driven conceptual modeling more accessible and practical for real-world applications, while preserving the formal rigor of its parent ontology.</p>"},{"location":"ontouml-gufo/gufo/#what-is-gufo","title":"What is gUFO?","text":"<p>gUFO provides a set of foundational building blocks\u2014such as <code>Object</code>, <code>Event</code>, <code>Quality</code>, and <code>Situation</code>\u2014that help structure knowledge in a clear and shared way. These concepts are intended to be reused across different domains, helping organizations align their understanding of data and concepts.</p> <p>Put simply, gUFO is a toolkit for creating consistent and precise representations of meaning.</p>"},{"location":"ontouml-gufo/gufo/#why-was-gufo-created","title":"Why was gUFO created?","text":"<p>UFO is rich and comprehensive, but its complexity can be a barrier for practical adoption. To address this, gUFO was introduced in 2019 as a lightweight version of UFO. It focuses on usability, compatibility with existing tools, and ease of adoption for systems that need formal grounding without the burden of full ontological complexity.</p> <p>The goal was to support knowledge graph creation, semantic data integration, and model interoperability in a more approachable way [2].</p>"},{"location":"ontouml-gufo/gufo/#where-is-gufo-used","title":"Where is gUFO used?","text":"<p>gUFO has found applications in various fields:</p> <ul> <li>Semantic interoperability across organizations and systems</li> <li>Knowledge graphs for structured web data and enterprise data integration</li> <li>Ontology engineering and conceptual modeling in research and industry</li> <li>Linked data and Semantic Web technologies</li> <li>Education, as a stepping stone to foundational ontologies</li> </ul> <p>Its use has been documented in both academic and applied settings across domains such as public health, digital humanities, software engineering, and e-government [5].</p>"},{"location":"ontouml-gufo/gufo/#when-was-gufo-developed","title":"When was gUFO developed?","text":"<p>gUFO was released in 2019 by Jo\u00e3o Paulo A. Almeida, Giancarlo Guizzardi, Tiago Prince Sales, and Ricardo A. Falbo. It is built on more than a decade of research on UFO and its application in ontology-driven conceptual modeling [1].</p>"},{"location":"ontouml-gufo/gufo/#how-does-gufo-work","title":"How does gUFO work?","text":"<p>gUFO is implemented in OWL 2 DL, which means it can be used with standard ontology tools and reasoners. Its key features include:</p> <ul> <li>Reusable core categories grounded in formal ontology</li> <li>Interoperability with tools and linked data ecosystems</li> <li>Simplified structure focused on structural (not behavioral) aspects</li> <li>Extendibility, allowing users to specialize concepts for their domains</li> </ul> <p>This balance between formality and simplicity makes gUFO ideal for organizations aiming to adopt semantic technologies without starting from scratch.</p>"},{"location":"ontouml-gufo/gufo/#how-to-create-a-gufo-ontology","title":"How to Create a gUFO Ontology","text":"<p>There are two main ways to create a gUFO-compliant ontology, depending on the user's familiarity with ontology modeling tools and the desired level of formality or tool support.</p>"},{"location":"ontouml-gufo/gufo/#1-direct-authoring-in-owl","title":"1. Direct Authoring in OWL","text":"<p>The most flexible approach is to create the ontology directly using an OWL 2 DL editor such as:</p> <ul> <li>Prot\u00e9g\u00e9 \u2013 A free, open-source ontology editor widely used in academic and industry settings</li> <li>TopBraid Composer \u2013 A professional-grade editor with advanced RDF and SPARQL support</li> <li>WebVOWL Editor \u2013 A lightweight, web-based tool for visual ontology creation</li> </ul> <p>You can import the official gUFO ontology from:</p> <ul> <li>OWL file: https://purl.org/nemo/gufo</li> <li>Documentation site: https://nemo-ufes.github.io/gufo/</li> </ul> <p>After importing gUFO into your tool, you can begin defining your own classes and properties as specializations of gUFO\u2019s foundational categories, such as <code>gufo:Object</code>, <code>gufo:Event</code>, <code>gufo:Quality</code>, or <code>gufo:Situation</code>.</p> <p>This approach gives full control over ontology structure and serialization, and is ideal for applications requiring fine-grained reasoning or integration with existing linked data.</p>"},{"location":"ontouml-gufo/gufo/#2-modeling-in-ontouml-and-direct-export-to-gufo","title":"2. Modeling in OntoUML and Direct Export to gUFO","text":"<p>An alternative and user-friendly approach to creating a gUFO ontology is to first model it conceptually in OntoUML and then export it directly to a gUFO-compliant OWL ontology using the ontouml-vp-plugin in Visual Paradigm.</p>"},{"location":"ontouml-gufo/gufo/#steps","title":"Steps:","text":"<ol> <li>Create the OntoUML model using Visual Paradigm with the OntoUML plugin.</li> <li>The plugin supports OntoUML stereotypes such as <code>\u00abkind\u00bb</code>, <code>\u00abrole\u00bb</code>, <code>\u00abrelator\u00bb</code>, and offers a dedicated palette for ontology-driven modeling.</li> <li>Export directly to gUFO:</li> <li>From the top menu, select <code>Export \u2192 Export to gUFO</code>.</li> <li>In the dialog that appears, configure the export parameters:<ul> <li>Set the Base IRI</li> <li>Choose the output format (e.g., Turtle)</li> <li>Optionally enable URI customization, property creation behavior, and pre-analysis</li> </ul> </li> <li>Select which model elements to include and click Export.</li> </ol> <p>This process will generate an OWL ontology in the selected format, conforming to the gUFO specification.</p>"},{"location":"ontouml-gufo/gufo/#summary","title":"Summary","text":"Approach Tooling Output Format Best For Direct OWL authoring Prot\u00e9g\u00e9, TopBraid, etc. OWL 2 / RDF Ontologists, Semantic Web experts OntoUML + transformation Visual Paradigm + plugins OWL 2 (via gUFO) Conceptual modelers, teams using UFO-based methods <p>Both approaches are valid and produce gUFO-compliant ontologies. The choice depends on the modeling style and technical familiarity of the user.</p>"},{"location":"ontouml-gufo/gufo/#references","title":"References","text":"<p> [1] Guizzardi, G. (2005). Ontological foundations for structural conceptual models. [PhD Thesis - Research UT, graduation UT, University of Twente]. Telematica Instituut / CTIT. [Access] [Download]</p> <p> [2] Almeida, J. P. A., Guizzardi, G., Sales, T. P., &amp; Falbo, R. A. (2019). gUFO: A Lightweight Implementation of the Unified Foundational Ontology (UFO). [Access]</p> <p> [3] Guizzardi, G., Wagner, G., Falbo, R. A., Guizzardi, R. S. S., &amp; Almeida, J. P. A. (2013). Towards Ontological Foundations for the Conceptual Modeling of Events. In Conceptual Modeling \u2013 ER 2013 (pp. 327\u2013341). Springer. [DOI]</p> <p> [4] Sales, T. P., Guizzardi, G., Almeida, J. P. A., &amp; Benevides, A. B. (2023). Ontology-Driven Conceptual Modeling with gUFO. In Frontiers in Artificial Intelligence and Applications, 394, 331\u2013336. [Access]</p> <p> [5] Guizzardi, G. (2020). Contributions to Ontology-Driven Conceptual Modeling Theory. [Doctoral Habilitation Thesis, Free University of Bozen-Bolzano]. [Download]</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/","title":"How to Create an OntoUML Model","text":"<p>Creating an OntoUML model requires a modeling tool that supports UML class diagrams. Since an OntoUML model is a valid UML class diagram enriched with specific stereotypes, it can, in principle, be created using any standard UML modeling tool that allows users to define custom stereotypes.</p> <p>The recommended approach is to use Visual Paradigm, a widely adopted UML modeling environment that integrates well with the OntoUML ecosystem through the ontouml-vp-plugin. This plugin provides native support for OntoUML stereotypes, model validation, and export to machine-readable formats.</p> <p>Other UML tools can also be used to manually create OntoUML models. Since OntoUML models conform to UML class diagram syntax, you can use any modeling environment that allows the definition of custom stereotypes or tags. Examples include:</p> <ul> <li>Astah UML \u2013 Lightweight UML modeling with custom profile support.</li> <li>Enterprise Architect (EA) \u2013 Robust, professional-grade tool supporting UML profiles and custom stereotypes.</li> <li>StarUML \u2013 Cross-platform tool with extensibility through plugins.</li> <li>Modelio \u2013 Free and open-source UML/BPMN tool with profile extension support.</li> <li>Papyrus \u2013 Open-source, Eclipse-based UML modeling framework with support for custom profiles.</li> </ul> <p>Tip</p> <p>If possible, prefer tools with native OntoUML support\u2014like Visual Paradigm with the ontouml-vp-plugin\u2014to avoid manual errors when assigning stereotypes.</p> <p>When using these tools, OntoUML stereotypes (e.g., <code>\u00abkind\u00bb</code>, <code>\u00abrole\u00bb</code>, <code>\u00abrelator\u00bb</code>) must be applied manually, and modelers must follow the conceptual modeling guidelines provided by the Unified Foundational Ontology (UFO).</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#installation-guide-for-visual-paradigm-and-the-ontouml-plugin","title":"Installation Guide for Visual Paradigm and the OntoUML Plugin","text":"<p>The following steps describe how to set up a modeling environment using Visual Paradigm and the <code>ontouml-vp-plugin</code>.</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#step-1-install-visual-paradigm","title":"Step 1: Install Visual Paradigm","text":"<p>Visual Paradigm is a commercial UML tool, but it offers a Community Edition that is free for non-commercial use.</p> <ul> <li>Download Visual Paradigm: https://www.visual-paradigm.com/download/</li> <li>Community Edition: https://www.visual-paradigm.com/download/community.jsp</li> </ul> <p>Follow the installation instructions for your operating system (Windows, macOS, or Linux).</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#step-2-install-the-ontouml-plugin","title":"Step 2: Install the OntoUML Plugin","text":"<p>To enable native support for OntoUML, you\u2019ll need to install the open-source plugin:</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#21-download-the-plugin","title":"2.1 Download the Plugin","text":"<ul> <li>GitHub repository: https://w3id.org/ontouml/vp-plugin</li> <li>Latest release (<code>.zip</code> file): https://w3id.org/ontouml/vp-plugin/releases</li> </ul> <p>Download the most recent <code>zip</code> file compatible with your Visual Paradigm version.</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#22-install-the-plugin-in-visual-paradigm","title":"2.2 Install the Plugin in Visual Paradigm","text":"<ol> <li>Open Visual Paradigm.</li> <li>Navigate to Help \u2192 Install Plugin.</li> <li>Select the <code>.zip</code> file you downloaded.</li> <li>Restart Visual Paradigm when prompted.</li> </ol>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#step-3-create-an-ontouml-diagram","title":"Step 3: Create an OntoUML Diagram","text":"<p>After installing the plugin, follow the steps below to create your first OntoUML diagram in Visual Paradigm:</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#31-create-a-new-project","title":"3.1 Create a New Project","text":"<p>Go to the Project tab and click New to create a new modeling project. This will initialize your workspace.</p> <p></p> <p>In the pop-up window that appears, enter a name for your project and the author\u2019s name. Then click on Create Blank Project to proceed.</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#32-create-a-new-model-inside-the-project","title":"3.2 Create a New Model Inside the Project","text":"<p>In the Model Explorer, right-click on <code>My Project</code> and select Model \u2192 New Model\u2026. Give your model a name such as \u201cMy Model\u201d.</p> <p></p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#33-add-a-new-diagram-to-the-model","title":"3.3 Add a New Diagram to the Model","text":"<p>Right-click on your newly created model (e.g., \u201cMy Model\u201d), go to Sub Diagrams \u2192 Add \u2192 New Diagram\u2026.</p> <p></p> <p>In the dialog that opens, select Class Diagram as the diagram type. Then give your diagram a name (e.g., \u201cMy Model Class Diagram\u201d) and click OK.</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#34-start-modeling-with-ontouml-stereotypes","title":"3.4 Start Modeling with OntoUML Stereotypes","text":"<p>Once the diagram opens, use the class diagram tools to create elements. Right-click on a class, go to OntoUML Stereotypes, and choose the appropriate stereotype from the list (e.g., <code>Kind</code>, <code>Role</code>, <code>Relator</code>, <code>Phase</code>, etc.).</p> <p>These stereotypes correspond to the ontological distinctions defined by the Unified Foundational Ontology (UFO).</p> <p></p> <p>At this point, your OntoUML modeling environment is ready. You can continue building the model using semantically grounded elements and defining relationships among them.</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#35-add-a-new-ontouml-class-to-the-diagram","title":"3.5 Add a New OntoUML Class to the Diagram","text":"<p>To begin modeling, select the Class tool from the left-side toolbar and click anywhere on the diagram canvas to place a class element.</p> <p>Then, right-click the class and go to OntoUML Stereotypes to assign a semantic type such as <code>Kind</code>, <code>Category</code>, <code>Relator</code>, or others, depending on the nature of the concept you are representing.</p> <p></p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#additional-features-of-the-plugin","title":"Additional Features of the Plugin","text":"<p>The <code>ontouml-vp-plugin</code> enhances Visual Paradigm with native support for OntoUML modeling. It adds dedicated functionalities and modeling options to assist in building well-founded models:</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#modeling-support","title":"Modeling Support","text":"<ul> <li>OntoUML Stereotypes: Easily assign OntoUML stereotypes to classes and relations through a context menu.</li> <li>Suggested Stereotypes: Access intelligent recommendations based on modeling context.</li> <li>Meta-Properties: Enrich model elements with additional OntoUML-specific metadata.</li> </ul> <p>These options are available by right-clicking a class or relation in the diagram and choosing the appropriate OntoUML feature.</p>"},{"location":"ontouml-gufo/how-to-create-ontouml-model/#model-operations-and-validation","title":"Model Operations and Validation","text":"<p>The plugin also includes a dedicated OntoUML menu with tools to manage and analyze your model:</p> <ul> <li>Check Model: Validates the model according to OntoUML constraints.</li> <li>Check Diagram: Validates specific diagrams for structural and ontological correctness.</li> <li>Import from JSON: Load OntoUML models from serialized JSON files.</li> <li>Export to JSON: Save your model in machine-readable OntoUML JSON format.</li> <li>Export to gUFO: Export your model to OWL/RDF using the gUFO ontology.</li> </ul> <p>These tools assist in ensuring semantic consistency, enable data exchange across tools, and facilitate publishing and reuse of OntoUML models.</p> <p>For more details, see the plugin documentation: https://w3id.org/ontouml/vp-plugin#readme</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/","title":"OntoUML Stereotypes","text":"<p>Disclaimer</p> <p>While efforts have been made to ensure accuracy, the material in this page is still under review and may contain inaccuracies or omissions. Users are advised to interpret and apply the content with caution.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#class-stereotypes","title":"Class Stereotypes","text":""},{"location":"ontouml-gufo/ontouml-stereotypes/#kind","title":"Kind","text":"<p>Definition: A Kind is a rigid sortal type that provides a uniform principle of identity for its instances [1]. In other words, every instance of a Kind is inherently of that type for its whole existence, and the type supplies the criteria for distinguishing those instances from others.</p> <p>Example: Person or Organization can be modeled as Kinds. For instance, every individual person carries the essential identity of \u201cPerson\u201d throughout their lifetime. In an OntoUML model, Person as a Kind means that any instance of Person must always be a person (rigidly) and has its own unique identity as a person.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#collective","title":"Collective","text":"<p>Definition: A Collective is a rigid sortal whose instances are plural entities (collections or groups) composed of multiple individuals arranged in a uniform structure. A Collective provides an extensional identity principle for the group as a whole (the collection can change members over time without losing its identity as that collection if set as non-extensional) [1].</p> <p>Example: A flock of birds or a forest (collection of trees) would be modeled as a Collective. For example, The Beatles as a rock band can be seen as a Collective: the band remained the same entity even after one member was replaced, meaning the group\u2019s identity is defined at the collective level rather than by any particular member.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#quantity","title":"Quantity","text":"<p>Definition: A Quantity is a rigid sortal class whose instances are portions of some matter or mass, often described by mass nouns or substance terms. Quantities are individuals that do not carry an identity beyond the amount of stuff they constitute \u2013 they are typically divisible and lacking unique identity criteria for each portion [1].</p> <p>Example: In a model, Water or Gold can be represented as Quantities. Any particular sample of gold or volume of water is an instance of those Quantity types. For instance, one liter of water doesn\u2019t have an individual identity that differentiates it inherently from another liter of water \u2013 it\u2019s identified by its volume and content, not by an intrinsic identity like a person or object would have.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#subkind","title":"Subkind","text":"<p>Definition: A Subkind is a rigid sortal subtype that does not introduce its own identity principle but instead inherits the identity criterion from a supertype Kind. Subkinds classify a more specific group within a Kind, carrying all the identity properties defined by that Kind. They partition a Kind into exhaustive, disjoint subclasses without altering how instances are identified (the identity comes from the Kind) [1].</p> <p>Example: If Person is a Kind providing an identity principle for people, then MalePerson and FemalePerson could be modeled as Subkinds of Person. Each MalePerson or FemalePerson inherits the identity criteria from Person (being the same person over time). In practice, an individual like John who is classified as a Person can be further classified as a MalePerson Subkind, but John\u2019s identity as an individual is still determined by him being a person; the Subkind adds additional classification (male gender) without changing the identity basis.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#role","title":"Role","text":"<p>Definition: A Role is an anti-rigid sortal type that an individual can instantiate contingent on a particular relational context or situation. Roles are relationally dependent types, meaning an entity plays a role only by virtue of participating in some relation with other entities. Because Roles are anti-rigid, an instance can gain or lose that classification without losing its identity \u2013 the instantiation of the Role is temporary and dependent on external circumstances. [1] [3]</p> <p>Example: Student is a typical Role that a Person may play when enrolled in a school. A person isn\u2019t essentially or eternally a student \u2013 this Role is only instantiated while the person is involved in an enrollment relationship with an educational institution. When the person graduates or leaves school, they cease to be a Student (stop instantiating that Role) but remain the same person (their identity as a person is unchanged). Other examples include Employee (a Role a person plays when employed by a company) and Husband (a Role a person plays in the context of a marriage). An individual can move in and out of these role types over time.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#phase","title":"Phase","text":"<p>Definition: A Phase is an anti-rigid sortal that represents a transient, intrinsic condition or stage in the life of an entity. Phases partition the lifespan or state space of a Kind into exclusive periods or states, usually based on some property or stage (e.g., age, development state, status). A Phase is relationally independent (it does not require an external relator to be instantiated) but is temporary with respect to the instance\u2019s existence. All instances of a Phase share the identity supplied by their corresponding Kind, but only satisfy the Phase\u2019s classification during a certain timeframe or condition [1].</p> <p>Example: Child and Adult can be modeled as Phases of the Kind Person (assuming we partition a person\u2019s life by age). An individual person may be a Child in one period and then transition to the Adult phase later. The person\u2019s identity remains the same (as a Person) but they are classified under different Phases as their intrinsic attributes (in this case, age) change. Another example, in a butterfly\u2019s life cycle, Caterpillar and Butterfly are Phases of the Kind Insect (Lepidopteran) \u2013 the same insect individual goes through these phases, each phase being a temporary stage of that individual.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#category","title":"Category","text":"<p>Definition: A Category is a rigid non-sortal class (sometimes called a mixin class) that aggregates essential properties common to multiple distinct sortal types (Kinds or Subkinds). Categories do not supply an identity principle of their own (they are non-sortals) but are rigid, meaning if an individual instantiates the Category, it does so in all circumstances. A Category typically generalizes two or more disjoint sortal types that share certain fundamental features [6].</p> <p>Example: Physical Object can be modeled as a Category that generalizes different Kinds such as Person, Car, and Tree. All of those subtypes are physical objects sharing common essential properties (e.g., having mass and spatial extension), so those common properties are captured in the Category PhysicalObject. Any instance of Person, Car, or Tree will necessarily instantiate PhysicalObject as well, since it rigidly applies to all of them. Another example from ontology literature is RationalAgent as a Category that includes both Person and IntelligentSoftwareAgent \u2014 both persons and AI agents could be seen as rational actors, so the Category defines properties they must both have (like the ability to reason).</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#rolemixin","title":"RoleMixin","text":"<p>Definition: A RoleMixin is an anti-rigid, externally dependent non-sortal class that captures a role-like property shared by instances of different sorts (i.e. different identity-providing types). A RoleMixin generalizes role behaviors that can be played by heterogeneous kinds of objects. Because it\u2019s anti-rigid, no instance is eternally in the RoleMixin type \u2013 an entity instantiates the RoleMixin only when it satisfies certain relational conditions \u2013 and because it\u2019s externally dependent, that instantiation depends on some relation to other entity(ies), similar to roles. In short, a RoleMixin is an abstract \u201crole pattern\u201d applicable across multiple types [4].</p> <p>Example: Customer can be modeled as a RoleMixin, since many different kinds of entities can act as a customer in a purchase context. For example, a Person and a Company (which are distinct Kinds with their own identity principles) might both play the role of \u201cCustomer\u201d. Instead of having separate PersonCustomer and CompanyCustomer roles, an abstract RoleMixin Customer can be used to capture the common features of \u201cbeing a customer\u201d that apply to both persons and organizations. Another example, in communication, an abstract RoleMixin like Responder could be defined, which can be instantiated by either a human agent or an automated agent type, whenever they are in the responding role in some interaction.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#phasemixin","title":"PhaseMixin","text":"<p>Definition: A PhaseMixin is an anti-rigid non-sortal class that represents a contingent phase (state or condition) shared by instances of multiple different sorts. Like a RoleMixin, it is a dispersive abstract type applying across different underlying types, but unlike RoleMixin, a PhaseMixin corresponds to an intrinsic, time-bound condition rather than a relational role. A PhaseMixin is essentially a generalization of Phase-like characteristics that can apply to instances of heterogeneous Kinds. In formal terms, PhaseMixins (together with RoleMixins) are exactly those types that are anti-rigid and non-sortal [4].</p> <p>Example: Consider an abstract condition like AdultOrganism that could cover adult stages of different species. We might model AdultOrganism as a PhaseMixin that applies to instances of Person, Elephant, Dog, or any other Kind representing an organism, whenever those individuals are in their adult phase. Each of those Kinds has its own identity principle (each is a Kind), and each defines its own Phase (like Person has phases Child/Adult, Dog has Puppy/AdultDog, etc.), but the PhaseMixin AdultOrganism captures the shared notion of \u201cadult stage\u201d across all those kinds. An individual entity (say, a particular dog) instantiates AdultOrganism during the time it\u2019s an adult, and a particular person instantiates AdultOrganism during their adult life stage. This modeling assures that AdultOrganism is not tied to one Kind\u2019s identity principle, and an instance ceases to instantiate the PhaseMixin when it\u2019s no longer in that phase (e.g., if it were possible to revert, or simply that it only instantiates after a certain age).</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#mixin","title":"Mixin","text":"<p>Definition: A Mixin is a non-sortal class (no single identity principle of its own) that aggregates properties which are essential to some of its instances but accidental to others \u2013 this means a Mixin is semi-rigid. Some instances instantiate the Mixin necessarily, while other instances instantiate it contingently. Mixins often represent a certain property or feature that can cut across different taxonomic hierarchies. They are used to factor out commonalities that are not uniformly essential to all instances [6].</p> <p>Example: An example of a Mixin is Seatable \u2013 imagine a property type representing \u201cbeing suitable for seating\u201d. A variety of concrete objects can satisfy this: chairs and stools instantiate Seatable essentially (by their nature they are for sitting, so every chair or stool must be seatable), whereas a rock or a stack of books might instantiate Seatable only contingently (a rock can be used as a seat, but it\u2019s not essentially meant for sitting). In an OntoUML model, Seatable as a Mixin would have chairs and stools as essential instances (if something is a Chair Kind, it must also be Seatable), while also potentially classifying other things that happen to be used as seats (accidentally seatable). The Mixin captures the shared property \u201ccan be sat upon\u201d without implying that everything that has that property belongs to the same kind or carries that property essentially.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#relator","title":"Relator","text":"<p>Definition: A Relator is an existentially dependent moment (in the sense of an object\u2019s dependent aspect) that mediates or connects two or more otherwise independent entities. Every instance of a Relator involves at least two distinct individuals and cannot exist without them. Relators are the ontological counterparts of what we think of as relationships or reified connections \u2013 they bear the relationship between entities. In OntoUML, a class stereotyped \u00abrelator\u00bb represents a situation or link that depends on multiple entities (its participants) to exist [2].</p> <p>Example: Typical examples of Relators include social or institutional relationships like Marriage, Employment, or Enrollment. For instance, an individual marriage Relator might connect two person instances as spouses; if either person ceases to exist (or the relational context is broken), that particular marriage instance cannot exist. Another example is a Purchase relator connecting a buyer and a seller (and perhaps an item); it is a single unit that depends on all parties \u2013 if the buyer or seller didn\u2019t exist, that purchase relationship instance couldn\u2019t exist. In a model, Marriage would be a relator class mediating Person-to-Person, EmploymentContract could be a relator connecting an Employee and a Company, etc.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#mode","title":"Mode","text":"<p>Definition: A Mode is an intrinsic moment (a dependent property or trope) that inheres in exactly one individual. Modes are existentially dependent on a single bearer entity \u2013 they cannot exist without that specific entity \u2013 and they represent properties, conditions, or dispositions of that entity. Unlike relators, modes do not connect multiple individuals; they characterize only their one bearer. In OntoUML, a class with stereotype \u00abmode\u00bb corresponds to a particular way some individual is, which depends on that individual [8].</p> <p>Example: Examples of modes include abilities, states, or conditions of individual things. For instance, John\u2019s skill in carpentry is a Mode that exists in John (and cannot exist without John). If we have a class Skill stereotyped as a Mode, an instance might be \u201cMary\u2019s Spanish-language skill,\u201d which is a particular mode inhering in Mary. Other examples: a person\u2019s belief or intention (which exists in the mind of that person), an illness (a condition inhering in a patient), or a magnetic property of a specific metal object. Each of these modes depends on one specific bearer and cannot be transferred to or shared by another entity.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#quality","title":"Quality","text":"<p>Definition: A Quality is a specific kind of Mode that represents a qualitative aspect of an individual \u2013 typically one that can be measured or compared \u2013 and is associated with a value in some quality dimension or space. In UFO terms, a Quality mediates between an individual (the bearer of the quality) and a value (often in a structured value space, like a number or a position on a scale). Every quality instance is existentially dependent on a particular bearer (the entity that \u201chas\u201d the quality) and can be conceived as an individual quality trope (e.g., a specific weight, color, or temperature of something) [3].</p> <p>Example: Consider the quality of Weight for physical objects. If we model Weight as a Quality, an individual object (say, a specific parcel) might have an instance of Weight (a mode) that connects it to a value (e.g., 5 kilograms) in the weight dimension. Another example is Color as a Quality: an apple has a particular color trope (its specific shade of red) that links the apple to a position in the color space. In OntoUML, we might represent Color as a Quality class; an instance \u201cthis apple\u2019s color\u201d is a quality dependent on that apple and is associated with a value (like an RGB value or a spot on the spectrum). Qualities thus allow modeling of attributes as first-class individuals, where their values can be compared or structured (e.g. two apples can share the same color quality value).</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#type","title":"Type","text":"<p>Definition: A Type (in OntoUML 2.0 extensions) is a rigid class whose instances are themselves types (classes or classifications of entities). In other words, a class stereotyped \u00abtype\u00bb is a higher-order type that classifies other classes. Any instance of a \u00abtype\u00bb is not a concrete individual but rather a category or kind at the object level. Because it is rigid, if something is an instance of a Type, it is necessarily so (it doesn\u2019t shift its classification in this meta-level sense) [7]. This construct allows modeling of metaclasses or \u201ctypes of types\u201d within the OntoUML model.</p> <p>Example: Consider modeling different models of cars: CarModel could be a class stereotyped as \u00abtype\u00bb. Its instances would be specific car models (which are themselves classes of cars in reality). For example, Tesla Model S or Fiat 500 would be instances of the CarModel Type \u2013 each of those instances represents a class of actual cars. Another example, species might be a class with stereotype \u00abtype\u00bb, whose instances are specific species (each species is a class of individual organisms). In an OntoUML model, using \u00abtype\u00bb allows us to treat those category-like entities (car models, species, product categories, etc.) as instances of a higher-order class while still respecting ontological distinctions.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#datatype","title":"DataType","text":"<p>Definition: A DataType in OntoUML represents a class of value spaces \u2013 it classifies primitive or value objects that are not considered individuals with identity in the domain, but rather abstract or structured values. A class stereotyped \u00abdatatype\u00bb defines a conceptual space of possible literal values (such as numbers, measures, or structured data like dates). DataType instances are typically used for attributes and are considered immutable and lacking an identity principle (two identical value instances are indistinguishable) [7].</p> <p>Example: Common examples of DataTypes include things like Integer, String, or domain-specific value types like CurrencyAmount or RGBColor. For instance, if we have a Temperature DataType, its instances might be values like \u201c36.6\u00b0C\u201d \u2013 two occurrences of the value 36.6\u00b0C are not considered two distinct identifiable entities, but essentially the same value. In a model, one might have MassInKilograms as a DataType to represent mass measurements; an instance 5.0 (kg) is a value that could be attached to some Quality or attribute but is not an independent entity in the domain. DataTypes thus serve to model sets of values and measurements that objects can bear.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#enumeration","title":"Enumeration","text":"<p>Definition: An Enumeration is a special kind of DataType class that specifies a finite, discrete set of possible literal values (enumeration literals) in a conceptual space. An Enumeration\u2019s instances are those predefined values, and no others. Like other DataTypes, enumeration values have no independent identity and are considered identical if they have the same literal. The stereotype \u00abenumeration\u00bb is used in OntoUML to represent attributes or classes where only a fixed list of values is allowed [7].</p> <p>Example: An example of an Enumeration is DayOfWeek, which has exactly seven instances (Monday, Tuesday, ..., Sunday) as its allowed values. In an OntoUML model, DayOfWeek would be an enumeration class with those seven literals. Another example: DriverLicenseCategory could be an enumeration with values {A, B, C, D, E} representing different license types. Each literal like B (for a car license) is an instance of the DriverLicenseCategory enumeration. Enumerations are typically used for attributes where the set of values is strictly limited and known in advance.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#event","title":"Event","text":"<p>Definition: An Event is a class whose instances are events or occurrences in time \u2013 perdurants rather than endurants. An Event type represents something that happens and has a temporal extension, such as a process, action, or incident. Classes stereotyped as \u00abevent\u00bb are disjoint from endurant (object) classes; an instance of an event class cannot simultaneously be an instance of a substantive object class. In OntoUML (extended with UFO-B concepts), marking a class as \u00abevent\u00bb indicates it captures a historical occurrence, and model constraints prevent mixing events with endurants in the class hierarchy [5].</p> <p>Example: Wedding, Conference, or Explosion could be modeled as event types. For instance, one might have an Accident class stereotyped \u00abevent\u00bb to represent accident occurrences. An individual accident (say, a specific car crash on January 1, 2025) is an instance of Accident. As an event, it unfolds in time and can have participants (like vehicles, persons) but it is not itself a persistent object. In the model, no endurant (like a Person or Car Kind) can be a subtype of Accident, and an event type cannot subtype an object type \u2013 this reflects the ontological separation of happenings versus things. Events often have attributes for time (e.g., start and end time) and can be related to endurants through event participation relationships.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#relationship-stereotypes","title":"Relationship Stereotypes","text":""},{"location":"ontouml-gufo/ontouml-stereotypes/#material","title":"Material","text":"<p>Definition: A Material relationship is an association that represents a concrete, domain-specific relationship between endurant entities, which exists by virtue of a mediating relator entity. Material relations have a \u201cmaterial structure\u201d of their own \u2013 there is some event, process, or relator underpinning the connection between the two related entities. In OntoUML, a material relation (stereotyped \u00abmaterial\u00bb) indicates that the relationship cannot hold unless a certain relator instance exists connecting the participants [1]. Material relations are typically contingent (not necessarily always true for the same pair of individuals over time) and are derivable: there is usually a corresponding Relator class and mediation associations that formally ground the material relation.</p> <p>Example: \u201cis married to\u201d between two Person instances is a Material relation \u2013 it holds due to the existence of a Marriage relator connecting those persons. If the marriage relator is dissolved (divorce), the material relation \u201cmarried to\u201d no longer holds. Similarly, \u201cworks for\u201d (between a Person and a Company) is material, typically founded on an EmploymentContract or employment relator. The OntoUML model would include an explicit relator class Employment with mediations to Person and Company, and the material relation works for can be derived via that relator. In essence, material relations in the diagram show the surface-level connection (e.g., Person \u2013works for\u2192 Company) while a relator (e.g., an instance of Employment) and mediation links provide the ontological justification for why that relation holds.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#mediation","title":"Mediation","text":"<p>Definition: Mediation is a fundamental existential dependence relationship that connects a relator to the entities it depends on (its participants). An association stereotyped \u00abmediation\u00bb links a relator type with a sortal type that the relator \u201cmediates\u201d or connects. Mediation signifies that an instance of the relator cannot exist unless it is mediating (linked to) an instance of the other type, and typically the relator is dependent on at least two such entities (hence there will be at least two mediation relations for a relator). In OntoUML, each relator must mediate at least two distinct individuals. Mediation is a directed relation: it goes from the relator to the mediated type(s), indicating the relator\u2019s dependency on its participants [7].</p> <p>Example: In a marriage scenario, a class Marriage (stereotyped \u00abrelator\u00bb) will have two mediation relations: one mediating Marriage to Person (for the spouse role on one side) and another mediating Marriage to Person (for the spouse on the other side). Each Marriage instance must be connected via these mediations to two person instances \u2013 it cannot exist in isolation. Another example: an Enrollment relator between a Student and a School would be modeled with a mediation from Enrollment to Student and another from Enrollment to School. The presence of an Enrollment instance (say, a specific enrollment record) is contingent on a particular student and a particular school existing. Mediation explicitly captures that dependence in the model \u2013 e.g., \u201cEnrollment (John \u2190enrollment\u2192 University X)\u201d, where the mediations connect the enrollment relator to John and to University X.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#characterization","title":"Characterization","text":"<p>Definition: Characterization is a relationship that links an individual (the bearer) with an intrinsic dependent property (the feature that characterizes it). In OntoUML, an association stereotyped \u00abcharacterization\u00bb connects a mode or quality (the feature) to the object it characterizes. The feature is an existentially dependent moment of the bearer \u2013 it cannot exist without the bearer, and it represents some intrinsic aspect of that bearer. The characterization relation signifies that every instance of the bearer type is associated with (or \u201cexemplifies\u201d) an instance of the feature type in question. (In formal terms, if a characterization link exists, the feature is said to inhere in the bearer.) [7]</p> <p>Example: If we model Weight as a Quality and Person as a Kind, a characterization relation might link Weight to Person (a person has a weight). An instance of Weight (say, John\u2019s weight of 70 kg) characterizes the individual John. John cannot have that particular weight instance without John existing, and that weight depends on John. As another example, consider a mode class Belief and an object class Agent; a characterization relation Agent has Belief means each belief instance exists in (characterizes) some agent. If Mary holds a particular belief (instance of Belief), that belief characterization link ties it to Mary as its bearer. Characterization relations are by nature directed from the mode/quality to the bearer (the mode \u201ccharacterizes\u201d the bearer) and typically have a cardinality of 1 at the bearer end (each mode instance is tied to exactly one bearer).</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#derivation","title":"Derivation","text":"<p>Definition: Derivation is a meta-relationship in OntoUML that connects a material relation to the relator that lies at its foundation. An association stereotyped \u00abderivation\u00bb links a relator class to a material association, indicating that the material relationship can be logically derived from the existence of the relator and its mediation relations [2]. In effect, the derivation relationship specifies that if a certain relator instance is present connecting two entities, then a corresponding material relation instance holds between those entities (and vice-versa, the material relation\u2019s presence implies a relator). This construct helps maintain consistency: cardinality constraints on the material relation are determined by the combination of mediations and the relator\u2019s existence.</p> <p>Example: In a model with Marriage as a relator and a material relation \u201cis married to\u201d between Person and Person, we would use a \u00abderivation\u00bb to tie the is married to association to the Marriage class. This indicates that \u201cPerson A is married to Person B\u201d is true if and only if there exists a Marriage instance connecting A and B. The derivation association often is shown as a dashed line from the relator to the material relation. Another example: a relator EmploymentContract might derive a material relation \u201cworks for\u201d (Person \u2013works for\u2192 Company). The derivation relationship formally states that the works for link between a given person and company exists because an EmploymentContract relator instance connects them, and if that contract is terminated (relator ceases to exist), the works for relation no longer holds.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#componentof","title":"ComponentOf","text":"<p>Definition: ComponentOf is a part-whole relationship stereotype that represents a functional composition between two objects. An association \u00abcomponentOf\u00bb indicates that the source is a part (component) of the target, and this part contributes in a specific way to the functionality of the whole. Both the whole and the part in a ComponentOf relation are typically functional complexes (Kinds or Subkinds that are complex objects). The relation is usually rigid for the part (the part must be part of some whole of the specified type while it exists) and often carries the inference that if the whole ceases to exist, the part\u2019s specific role or existence as that component ceases as well (depending on cardinalities and modality) [7].</p> <p>Example: A Engine is componentOf a Car. In an OntoUML model, if we have classes Car and Engine (both Kinds, say), a \u00abcomponentOf\u00bb relation from Engine (source) to Car (target) means an engine is a part of a car. The engine plays a functional role (providing power) in the context of the car. If we remove the engine from the car, it no longer functions as a \u201ccar engine\u201d (it might be just a spare part unless placed in another car). Other examples: Heart componentOf HumanBody, Wheel componentOf Bicycle. Each of these indicates a part-whole with a functional dependency: the part contributes to the operation or structure of the whole (and generally, a whole cannot function as intended without at least some of its key components present).</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#memberof","title":"MemberOf","text":"<p>Definition: MemberOf is a part-whole relation denoting membership in a collective. The stereotype \u00abmemberOf\u00bb connects either an individual functional object or a sub-collective (as the part) to a Collective (as the whole). This relation indicates that the part is an element of a group/collection that is considered a single collective entity. It carries the semantics that the members together form the collective whole, and often the collective\u2019s identity is independent of any particular member (extensional identity principle). Cardinality constraints usually allow multiple members in the collective and typically a member belongs to at most one such collective of the same type at a time (depending on the nature of the group) [1].</p> <p>Example: Person memberOf Team: an OntoUML model might have a class Team stereotyped \u00abcollective\u00bb and class Person (a Kind), with a \u00abmemberOf\u00bb association from Person to Team. This means persons are members of teams. For instance, Alice is a member of The Design Team. If Alice leaves the team, she is no longer connected by that memberOf relation, but the team may still continue (possibly with different members). Another example: a Soldier memberOf Platoon or Tree memberOf Forest (if Forest is treated as a collective of trees). In each case, the collection\u2019s identity (the team, platoon, or forest) isn\u2019t tied to any single member \u2013 members can come or go. The MemberOf relation formalizes this membership part-whole connection in the model.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#subcollectionof","title":"SubCollectionOf","text":"<p>Definition: SubCollectionOf is a part-whole stereotype used to represent a collective-to-collective parthood, i.e., a situation where a collective is part of a larger collective. Both the part and whole are Collectives in this relation. The sub-collection relation usually implies that every member of the sub-collective is also a member of the super-collective (the whole), and thus the sub-collective is essentially a subset of the larger collection (but treated as a unit itself). This relation is typically transitive and is used to model hierarchical groupings [1].</p> <p>Example: A Squad is a sub-collection of a Battalion. If we model a military unit hierarchy, Battalion (whole) and Squad (part) could both be Collectives (each comprised of soldiers), with a \u00absubCollectionOf\u00bb relation linking Squad to Battalion. This indicates each squad is part of some battalion. In an instance scenario, Squad Alpha (a collective of 10 soldiers) is a sub-collection of the 5th Battalion (a collective of 200 soldiers); all soldiers in Squad Alpha are members of the 5th Battalion. Another example: ResearchGroup subCollectionOf Department in a university context, if both are modeled as collectives of people. The SubCollectionOf relation helps maintain that the smaller group is conceptually part of the larger group, inheriting the membership context.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#subquantityof","title":"SubQuantityOf","text":"<p>Definition: SubQuantityOf is a part-whole relation that relates one Quantity to a larger Quantity of the same kind \u2013 essentially, it denotes a portion-to-whole relationship within stuff or masses. Both the part and whole are instances of a Quantity (a continuous substance or amount). The subquantity inherits the same identity criterion as the whole (since for quantities the identity is often defined by the kind of substance and possibly the total amount). This relation is transitive and is used to model situations where a quantity (e.g., a liter of water) is part of a larger quantity (e.g., a reservoir of water) [1].</p> <p>Example: If Water is modeled as a Quantity type, a \u00absubQuantityOf\u00bb association could relate Water to itself (or more specifically, between a volume and a larger volume of water) to express the notion \u201cpart of this water is contained in that whole\u201d. For instance, the 2 liters of water in this bottle is a subquantity of the 100 liters of water in the barrel. In the model, we might not distinguish subclasses, but at the instance level we use subquantity links: an instance representing 2L of water is subQuantityOf an instance representing 100L of water. Another example: Gold subQuantityOf Gold (one nugget of gold as part of a larger heap of gold). This stereotype explicitly captures divisible substance parthood, where dividing or combining quantities yields the same type of quantity (and identity is tied to the substance, not to any particular parcel).</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#participation","title":"Participation","text":"<p>Definition: Participation is an association stereotype that links an endurant (object or agent) with an event, indicating that the endurant participates in (takes part in) the occurrence. This relationship is foundational in connecting the ontology of endurants (UFO-A) with the ontology of events (UFO-B). An association \u00abparticipation\u00bb always relates a class stereotyped \u00abevent\u00bb to a class representing some endurant type. The existence of a participation link means that the endurant was involved in or present during the event [5]. In ontological terms, the event is existentially dependent on its participants to some extent (an event of a certain type might require specific participants to occur), and each participation is a specific way an endurant figures in an event.</p> <p>Example: In a model with an Event class like SoccerMatch and an endurant class like Person (or SoccerPlayer as a role of Person), a \u00abparticipation\u00bb association could connect SoccerPlayer to SoccerMatch. This would indicate that players (persons) participate in soccer match events. For a specific instance, John Doe participates in Match #45. Other examples include: Student (Person) participates in Exam (event), Machine participates in AssemblyProcess, or more generally Agent participates in Activity. The participation relation can carry additional semantics (roles in the event, time of participation), but fundamentally it ties the object to the event in which it took part. If John is linked to a particular Exam event via participation, it means John was a participant in that exam occurrence.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#creation","title":"Creation","text":"<p>Definition: Creation is a specialized kind of participation that indicates an endurant\u2019s coming into existence is tied to an event. An association stereotyped \u00abcreation\u00bb relates an event to an endurant type such that if an individual of that type is connected by this relation, that individual is generated or produced by that event. In other words, the event is the creative event for that object [5]. The created endurant did not exist before the event and begins to exist as the event happens or concludes. This stereotype captures the causal origination aspect in the model. (It is one half of the pair, with \u00abtermination\u00bb for ceasing to exist.)</p> <p>Example: Consider a class Artwork (endurant) and an event class PaintingSession. A \u00abcreation\u00bb association from PaintingSession to Artwork would mean the artwork is created in the painting event. For instance, Mona Lisa (an instance of Artwork) is created in Da Vinci\u2019s painting process event (an instance of PaintingSession). Another example: if Company is a Kind and FoundingEvent is an event class, a \u00abcreation\u00bb link can indicate that a company comes into existence as a result of a founding event. In the model, we might say StartupInc (Company) is connected to StartupIncFoundingEvent 2021 via a creation association \u2013 interpreting that the company was established in that event. The creation relationship makes it explicit that the event is responsible for the origination of the endurant.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#termination","title":"Termination","text":"<p>Definition: Termination is the counterpart to creation \u2013 a specialized participation indicating that an endurant\u2019s existence ends as a result of a certain event. When an endurant is linked to an event by a \u00abtermination\u00bb association, it means that event brings about the endurant\u2019s termination (the object ceases to exist in or due to that event). The terminated entity does not exist after the event [5]. This stereotype allows modeling of destruction, death, expiration or other forms of existential cessation in the context of events.</p> <p>Example: If we have a class Person and an event class DeathEvent, a \u00abtermination\u00bb association could connect them, meaning a person dies in that event. For instance, an instance DeathOfJohn (a DeathEvent) terminating the instance John (Person). Similarly, consider Company and DissolutionEvent with a termination link: a specific company ceases to exist during a particular dissolution event. Another example: a Building might have a termination relation with a Demolition event. E.g., Old City Hall Building is terminated by CityHallDemolition2022 event. In each case, the termination association in the model signifies that the event marks the final existence moment of the object \u2013 after the event, the object is no more.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#historicaldependence","title":"HistoricalDependence","text":"<p>Definition: HistoricalDependence is a relationship indicating that one endurant is linked to another due to some past event or history involving them. It is typically used when an entity\u2019s present state or existence is historically dependent on another entity\u2019s involvement in an event. The stereotype \u00abhistoricalDependence\u00bb connects two entities to show that one exists or has certain properties because of a specific event that happened involving the other. Essentially, it\u2019s a way to model a dependency that isn\u2019t ongoing like mediation, but rooted in a historical event (often an event that is not explicitly represented as a relator, but still has relevance) [7].</p> <p>Example: An example from cultural heritage: a City might be historically dependent on a certain Painting because that painting (an image object) depicts the city at a point in time. In the model, we could have City \u2013historicalDependence\u2192 ImageObject with the interpretation: Paris is historically dependent on \u201cPainting of Paris in 1800\u201d in the sense that the image is a historical record of Paris at that time. Another example: a Site historicallyDependsOn an Artifact (the site is historically significant due to the discovery of that artifact there during an event). Or a person might have a historical dependence on an award object because a past event of winning that award is part of their history. The historicalDependence relation is a way to connect entities via an implicit past event context \u2013 it implies there was some event linking them (e.g., the act of creation, discovery, representation, etc. in the past).</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#instantiation","title":"Instantiation","text":"<p>Definition: Instantiation (in OntoUML 2.0) is a relationship that links a concrete instance to a type class that classifies it, effectively making the instance an instance-of a model element. The stereotype \u00abinstantiation\u00bb is used to represent an instance-of relationship within the model itself. It connects a class that represents individuals to another class that represents a higher-order type (a class of which those individuals are instances). This is particularly employed when modeling type hierarchies or using the \u00abtype\u00bb stereotype classes. The relation is directed: typically from the individual (instance) to the type-of-type (classifier class) [7].</p> <p>Example: Suppose we have a class CarModel (stereotyped \u00abtype\u00bb) and another class Car (a Kind). We can use a \u00abinstantiation\u00bb association to connect Car to CarModel to indicate that each instance of Car is classified by some instance of CarModel. For instance, a specific car car123 is an instance of the model Tesla Model S. In the model, we might not represent individual instances explicitly, but we represent that Car123 (if it were an object) instantiates TeslaModelS (which is an instance of CarModel). Another concrete example: Person class connected via instantiation to a PersonType class \u2013 if we treat categories like \u201cStudentType\u201d as instances of PersonType, an instantiation link could show that \u201cAlice\u201d (a Person) is an instance of the type \u201cStudent\u201d (if \u201cStudent\u201d itself is modeled as an instance of a higher-order class). In summary, instantiation relations in OntoUML capture the idea that \u201cevery instance of Class A is classified by some instance of Class B\u201d \u2013 for example, every individual car instantiates exactly one car model.</p>"},{"location":"ontouml-gufo/ontouml-stereotypes/#references","title":"References","text":"<p>[1] Guizzardi, G. (2005). Ontological Foundations for Structural Conceptual Models. (PhD Thesis). Enschede, The Netherlands: Telematica Instituut / University of Twente.</p> <p>[2] Falbo, R. A. (2014). OntoUML Quick Guide and Pattern Language. Technical Report, NEMO, Federal University of Esp\u00edrito Santo.</p> <p>[3] Guizzardi, G., Herre, H., &amp; Wagner, G. (2004). \u201cTowards Ontological Foundations for UML Conceptual Models.\u201d In ER 2004 Workshops (pp. 110\u2013121). Springer.</p> <p>[4] Guizzardi, G., et al. (2018). \u201cOntology-Based Model Transformations in OntoUML: Supporting Role and Phase Mixins.\u201d NEMO Research Report, Federal University of Esp\u00edrito Santo.</p> <p>[5] Guizzardi, G., et al. (2013). \u201cTowards Ontological Foundations for the Conceptual Modeling of Events.\u201d In ER\u00a02013 \u2013 Conceptual Modeling (LNCS\u00a08217, pp.\u00a0327\u2013341). Springer.</p> <p>[6] Such\u00e1nek, M., &amp; Alves, V. (2018). OntoUML Specification Documentation. (Ontology specification document).</p> <p>[7] AlpineBits Alliance. (2023). Modeling Language: OntoUML (AlpineBits Ontology Documentation).</p> <p>[8] Guizzardi, G., &amp; Falbo, R. A. (2008). \u201cExperiencing UFO-Based Ontology Design.\u201d Journal of Software Engineering and Applications, 1(1), 19\u201328.</p>"},{"location":"ontouml-gufo/ontouml-ufo-catalog/","title":"OntoUML/UFO Catalog","text":"<p>The OntoUML/UFO Catalog is a structured, community-driven repository of real-world models represented using the OntoUML language and grounded in the Unified Foundational Ontology (UFO). It was developed to support empirical research, educational activities, and tool development in ontology-driven conceptual modeling.</p> <p>This catalog provides a curated collection of models across diverse domains\u2014such as law, healthcare, logistics, and cybersecurity\u2014each described with rich metadata detailing its origin, modeling objective, language, domain, and other relevant aspects. By offering standardized, machine-readable formats and persistent identifiers, the catalog promotes reuse, discoverability, and long-term accessibility of high-quality conceptual models.</p>"},{"location":"ontouml-gufo/ontouml-ufo-catalog/#access-and-structure","title":"Access and Structure","text":"<p>The catalog is openly maintained on GitHub at w3id.org/ontouml/models. Models are provided in multiple formats, including:</p> <ul> <li><code>.json</code>: JSON serialization compliant with the OntoUML Schema</li> <li><code>.ttl</code>: RDF/Turtle files using the OntoUML Vocabulary</li> <li><code>.vpp</code>: Original diagrams in Visual Paradigm format</li> </ul> <p>Tip</p> <p>If your goal is to use OntoUML with Semantic Web technologies, prefer the <code>.ttl</code> files. For diagram visualization and editing, use the <code>.vpp</code> files in Visual Paradigm.</p> <p>Each model is organized in its own folder and includes a set of standardized metadata files (<code>metadata.ttl</code>, <code>metadata-json.ttl</code>, <code>metadata-vpp.ttl</code>, etc.). The catalog as a whole is described by a root <code>catalog.ttl</code> file and validated using SHACL shapes provided under the <code>/shapes</code> directory.</p>"},{"location":"ontouml-gufo/ontouml-ufo-catalog/#directory-structure-overview","title":"Directory Structure Overview","text":"<pre><code>/ontouml-models\n\u251c\u2500\u2500 catalog.ttl\n\u251c\u2500\u2500 /models\n\u2502   \u2514\u2500\u2500 /[model-id]/\n\u2502       \u251c\u2500\u2500 ontology.json\n\u2502       \u251c\u2500\u2500 ontology.ttl\n\u2502       \u251c\u2500\u2500 ontology.vpp\n\u2502       \u251c\u2500\u2500 metadata.ttl\n\u2502       \u251c\u2500\u2500 metadata-json.ttl\n\u2502       \u251c\u2500\u2500 metadata-vpp.ttl\n\u2502       \u251c\u2500\u2500 /original-diagrams/\n\u2502       \u2514\u2500\u2500 /new-diagrams/\n\u251c\u2500\u2500 /shapes\n    \u251c\u2500\u2500 Catalog-shape.ttl\n    \u251c\u2500\u2500 Dataset-shape.ttl\n    \u251c\u2500\u2500 Distribution-shape.ttl\n    \u251c\u2500\u2500 Resource-shape.ttl\n    \u2514\u2500\u2500 SemanticArtefact-shape.ttl\n</code></pre> <p>A public dashboard is available at w3id.org/ontouml-models/dashboard, offering visualizations of the catalog\u2019s contents. Users can explore metadata distributions by year, domain, modeling task, and stereotype usage. As of now, the catalog comprises over 190 datasets, with more than 13.000 classes, 9.000 relations, and hundreds of thousands of RDF triples.</p>"},{"location":"ontouml-gufo/ontouml-ufo-catalog/#catalogs-persistent-urls","title":"Catalog's Persistent URLs","text":"<ul> <li>FDP Catalog page: https://w3id.org/ontouml-models</li> <li>GitHub repository: https://w3id.org/ontouml-models/git</li> <li>Dashboard: https://w3id.org/ontouml-models/dashboard</li> <li>Catalog's latest release: https://w3id.org/ontouml-models/release</li> </ul>"},{"location":"ontouml-gufo/ontouml-ufo-catalog/#references","title":"References","text":"<p>The OntoUML/UFO Catalog has been formally described in the following peer-reviewed publication:</p> <p>Prince Sales, T., Barcelos, P. P. F., Fonseca, C. M., Souza, I. V., Romanenko, E., Bernab\u00e9, C. H., Bonino da Silva Santos, L. O., Fumagalli, M., Kritz, J., Almeida, J. P. A., &amp; Guizzardi, G. (2023). A FAIR catalog of ontology-driven conceptual models. Data &amp; Knowledge Engineering, 147, 102210. https://doi.org/10.1016/j.datak.2023.102210. Permanent URL: https://w3id.org/ontouml-models/.</p> <p>This article presents the rationale, structure, and empirical coverage of the catalog and is recommended for citation when using the catalog in research.</p>"},{"location":"ontouml-gufo/ontouml/","title":"OntoUML","text":"<p>OntoUML is an ontologically well-founded language designed for ontology-driven conceptual modeling. It extends the Unified Modeling Language (UML) by incorporating the ontological distinctions provided by the Unified Foundational Ontology (UFO). Through UML\u2019s profiling mechanism, OntoUML defines a collection of class and association stereotypes that reflect the ontological distinctions present in UFO. It also establishes semantically motivated syntactical constraints to ensure that every syntactically correct model represents a sound UFO-based ontology.</p> <p>OntoUML introduced a methodological commitment to ontological analysis, helping modelers make conceptually sound modeling decisions. By aligning UML notation with foundational ontology, OntoUML became a practical and rigorous approach to ontology-driven conceptual modeling [1].</p> <p>Originally developed to make the use of foundational ontology in modeling more accessible and operational, OntoUML plays a central role in applying UFO in practice. The language was engineered to support the creation of high-quality domain models by explicitly encoding ontological distinctions in modeling constructs, enabling a principled approach to identifying and correcting conceptual modeling errors early in the development process [2].</p> <p>Over time, OntoUML evolved beyond a simple UML profile: it became a community-supported ecosystem with formal semantics and tool support. Its precision and ontological grounding have made it especially valuable in complex domains such as healthcare, defense, digital forensics, and enterprise modeling, where ambiguity and conceptual inconsistency can have significant consequences [2].</p>"},{"location":"ontouml-gufo/ontouml/#origins","title":"Origins","text":"<p>The development of OntoUML is rooted in the work of Giancarlo Guizzardi, particularly his Ph.D. thesis titled Ontological Foundations for Structural Conceptual Models [3]. Although the term \u201cOntoUML\u201d was not used in that work, the conceptual basis for the language\u2014its ontological foundations, modeling distinctions, and methodological approach\u2014was thoroughly developed there. Similarly, the ontology that would later be known as the Unified Foundational Ontology (UFO) was introduced in substance, though not yet by name.</p> <p>The formal naming and definition of UFO as a unified foundational ontology appeared in a set of contemporaneous publications by Guizzardi and Wagner [4][5][6]. These works extended the ideas from the thesis and applied them to domains such as agent concepts and business modeling, positioning UFO as a comprehensive foundation for conceptual modeling.</p> <p>OntoUML was conceived as a lightweight UML profile grounded in this ontological foundation, designed to bridge the gap between formal ontology and practical modeling. It provides semantically rich modeling constructs through stereotypes and well-defined constraints that reflect ontological distinctions\u2014such as types, roles, phases, and relators. This ensures that OntoUML models are logically consistent and ontologically expressive, enhancing semantic precision and interoperability.</p>"},{"location":"ontouml-gufo/ontouml/#documentation-and-standardization-efforts","title":"Documentation and Standardization Efforts","text":"<p>Unlike some modeling languages that provide a centralized and formal specification, OntoUML does not have a single, unified source of documentation. Instead, its evolution is driven by academic research, with improvements and extensions typically introduced through peer-reviewed publications.</p> <p>This decentralized development model can pose challenges for newcomers, making the language harder to study and adopt compared to alternatives that offer consolidated reference materials.</p> <p>There are, however, two major online resources that offer learning materials for OntoUML:</p> <ul> <li> <p>The official OntoUML portal: https://ontouml.org/ </p> <p>While this is the main site, much of its content is outdated and has not been maintained in recent years.</p> </li> <li> <p>The documentation project at Read the Docs: https://ontouml.readthedocs.io/en/latest/ </p> <p>This version is more comprehensive and somewhat more recent, but it still contains outdated content and should be read with caution.</p> </li> </ul> <p>Despite their limitations, these resources remain valuable for learning the language. However, users should remain aware of their partial and outdated nature and supplement them with insights from more recent academic publications.</p>"},{"location":"ontouml-gufo/ontouml/#additional-learning-resources","title":"Additional Learning Resources","text":"<p>Professor Giancarlo Guizzardi, the original creator of OntoUML and the Unified Foundational Ontology (UFO), offers a wide array of high-quality educational materials freely accessible through his personal website. These resources are invaluable for those interested in learning about ontologies, foundational ontology, and the practical use of OntoUML.</p> <ul> <li>Recorded Talks and Keynotes \u2014 Presentations and invited lectures on ontologies, conceptual modeling, and foundational theories.</li> <li>Courses and Tutorials \u2014 Graduate-level lectures, structured modules, and instructional materials on ontology-driven conceptual modeling and OntoUML.</li> <li>Research and Publications \u2014 A comprehensive collection of peer-reviewed papers, book chapters, and conference proceedings that define and advance the OntoUML language and UFO theory.</li> </ul> <p>Together, these materials provide both theoretical grounding and practical guidance, making them highly valuable for students, researchers, and professionals working with conceptual models.</p>"},{"location":"ontouml-gufo/ontouml/#adoption-and-influence","title":"Adoption and Influence","text":"<p>Since its inception, OntoUML has been adopted by various academic, corporate, and governmental institutions worldwide for developing conceptual models across diverse domains. The foundational theories underlying OntoUML have also influenced other conceptual modeling languages, such as ORM 2.0.</p> <p>Several research groups have contributed to the development and dissemination of OntoUML, including:</p> <ul> <li>The Semantics, Cybersecurity &amp; Services (SCS) group at the University of Twente, the Netherlands  </li> <li>The Ontology &amp; Conceptual Modeling Research Group (NEMO) at the Federal University of Esp\u00edrito Santo, Brazil  </li> <li>The KRDB Research Centre for Knowledge-based Artificial Intelligence at the Free University of Bozen-Bolzano, Italy  </li> <li>The Center for Conceptual Modelling and Implementation (CCMi) at the Faculty of Information Technology, Czechia</li> </ul>"},{"location":"ontouml-gufo/ontouml/#supporting-tools-and-developments","title":"Supporting Tools and Developments","text":"<p>The official development of OntoUML tools is hosted on GitHub at https://github.com/OntoUML. These projects are primarily academic efforts, maintained by researchers and contributors from the OntoUML community.</p> <ul> <li>ontouml-js: A JavaScript library for creating, manipulating, and serializing OntoUML models into JSON format compliant with the ontouml-schema.</li> <li>ontouml-json2graph: Transforms OntoUML JSON models into graph representations aligned with the OntoUML Vocabulary, facilitating visualization and semantic analysis.</li> <li>ontouml-metamodel: Provides an implementation-independent metamodel of OntoUML, covering both abstract and concrete syntaxes, serving as a reference for various OntoUML tools.</li> <li>ontouml-models: A collaborative, structured, and open-source catalog of OntoUML and UFO ontology models, supporting empirical research and model sharing. <p>A detailed description of the catalog is provided in the OntoUML/UFO Catalog page.</p> </li> <li>ontouml-models-lib: A Python library designed to access and manage OntoUML models from the OntoUML/UFO Catalog, simplifying software development tasks.</li> <li>ontouml-models-tools: A set of tools for processing and validating OntoUML models, including functionalities for data quality verification and model analysis.</li> <li>ontouml-models-vocabulary: Defines vocabularies to annotate and interlink models within the OntoUML/UFO Catalog, enhancing semantic interoperability.</li> <li>ontouml-schema: Provides a JSON Schema representation for OntoUML models, enabling validation and exchange of models in a standardized format.</li> <li>ontouml-server: A server-side application offering services for OntoUML model management, including storage, conversion, and validation functionalities.</li> <li>ontouml-vocabulary: An OWL vocabulary that formalizes the OntoUML metamodel, supporting the serialization and exchange of OntoUML models as linked data.</li> <li>ontouml-vocabulary-lib: A Python library facilitating the manipulation of OntoUML vocabulary concepts within RDFLib graphs, bridging OntoUML and Semantic Web technologies.</li> <li>ontouml-vp-plugin: A plugin for Visual Paradigm that integrates OntoUML modeling capabilities, allowing users to create and manage OntoUML models within the Visual Paradigm environment.</li> </ul> <p>These tools enhance the usability and applicability of OntoUML across various modeling workflows, supporting both academic exploration and industrial adoption.</p>"},{"location":"ontouml-gufo/ontouml/#references","title":"References","text":"<p> - [1] Guizzardi, G., Wagner, G., Falbo, R. A., Guizzardi, R. S. S., &amp; Almeida, J. P. A. (2015). OntoUML: A well-founded profile for UML-based conceptual modeling. Applied Ontology, 10(3\u20134), 259\u2013291. https://doi.org/10.3233/AO-150157</p> <p> - [2] Guizzardi, G., Wagner, G., Almeida, J. P. A., Guizzardi, R. S. S., &amp; Sales, T. P. (2022). The Unified Foundational Ontology (UFO): Supercharging modeling with foundational ontologies. Applied Ontology, 17(1), 1\u201344. https://doi.org/10.3233/AO-210256</p> <p> - [3] Guizzardi, G. (2005). Ontological foundations for structural conceptual models [Doctoral dissertation, University of Twente]. Telematica Instituut / CTIT. [Access] [Download]</p> <p> - [4] Guizzardi, G., &amp; Wagner, G. (2004). On the ontological foundations of agent concepts. In Proceedings of the 6th International Bi-Conference Workshop on Agent-Oriented Information Systems (AOIS), held in conjunction with CAiSE 2004, Riga, Latvia.</p> <p> - [5] Guizzardi, G., &amp; Wagner, G. (2005a). Some applications of a unified foundational ontology in business modeling. In T. Bui &amp; A. G. Tjoa (Eds.), Ontologies and business systems analysis. IDEA Group Publishing.</p> <p> - [6] Guizzardi, G., &amp; Wagner, G. (2005b). Towards ontological foundations for agent modeling concepts using UFO. In V. Dignum, M. Dastani, B. Dunin-Ke\u0327plicz, &amp; R. Meyer (Eds.), Agent-Oriented Information Systems II (pp. xx\u2013xx). Lecture Notes in Artificial Intelligence (Vol. 3508). Springer. https://doi.org/10.1007/11538394_6</p>"},{"location":"output/","title":"Output","text":"<p>In this section you will find the (links to the) output of our activities.</p>"},{"location":"output/#discover","title":"Discover","text":""},{"location":"output/#landscape-analysis","title":"Landscape analysis","text":"<p>This involves the analysis of similar and related initiatives and models.</p> <p>Cancer Image Europe (EUCAIM) hyper-ontology EUCAIM is pioneering a pan-European federated infrastructure for cancer images, fueling AI innovations. It addresses semantic interoperability challenges among distributed data repositories that use heterogeneous cancer image data models through a semantically well-founded domain ontology for the oncology domain. To enable federated querying across these repositories, the integration of a semantic interoperability layer is required. The so-called EUCAIM hyper-ontology is a common semantic meta-model that aims to support and maintain semantic interoperability among heterogeneous cancer image data models/standard. Using the hyper-ontology, the real-world meaning of essential medical and imaging data/metadata is preserved and exchanged in a standardized, consistent, and meaningful way. Its core layer and upper layer are based on the Unified Foundational Ontology (UFO) with links to HL7 minimal Common Oncology Data Elements (mCODE).</p> <p>ERDERA CARE-SM</p> <p>KIK-V</p> <p>Simple Standard for Sharing Ontological Mappings (SSSOM)</p> <p>Yosemite project</p> <p>Common Data Models in GDI, cohorts, oncology domain node, and HealthAI</p> <p>European Data Spaces</p>"},{"location":"output/#initial-use-case-selection","title":"Initial use case selection","text":""},{"location":"output/#define","title":"Define","text":""},{"location":"output/#personas-and-user-journeys","title":"Personas and user journeys","text":""},{"location":"output/#develop-deliver","title":"Develop &amp; Deliver","text":"<p>All versions of the reference model will be made openly available to the community via the repository at https://w3id.org/health-ri/semantic-interoperability.</p>"},{"location":"semantic-interoperability/","title":"Semantic Interoperability Overview","text":"<p>Semantic interoperability is a cornerstone of effective data exchange, ensuring that information shared between systems retains its intended meaning. This capability is vital across various sectors, including healthcare, public administration, and the Internet of Things (IoT), facilitating seamless communication and collaboration.</p>"},{"location":"semantic-interoperability/#what-is-semantic-interoperability","title":"What is Semantic Interoperability?","text":"<p>Semantic interoperability refers to the ability of different computer systems to exchange data with unambiguous, shared meaning. Unlike syntactic interoperability, which focuses on the format of data exchange, semantic interoperability ensures that the meaning of the data is preserved and understood consistently across different systems. This is achieved by linking data elements to a common vocabulary or ontology, allowing machines to interpret and process information accurately without human intervention [1][2].</p> <p>A critical challenge that semantic interoperability aims to address is the \"false agreement\" problem, as defined by Nicola Guarino. This problem arises when different agents (e.g., systems or people) use the same term but mean different things, or when they use different terms but mean the same thing. Guarino explains that many current representation languages are ontologically neutral, allowing knowledge engineers to use identical formal structures to represent fundamentally distinct concepts. This neutrality often leads to false agreements\u2014apparent consensus at the syntactic or logical level that masks genuine semantic divergence.</p> <p>To prevent this, semantic interoperability frameworks must explicitly represent ontological commitments, ensuring that shared terms reflect shared understanding [3]. Building on this, Guizzardi adds that interoperability succeeds only when these commitments are not only stated, but also harmonized across systems [11]. Without this alignment, different agents may construct models that appear compatible but actually rely on divergent conceptualizations. As both Guarino and Guizzardi highlight, even when systems use the same vocabulary, they can still misunderstand each other if their ontologies reflect different views of the world. Semantic interoperability must therefore go beyond vocabulary alignment to include agreement on the underlying conceptual structure [4].</p> <p>As Guizzardi explains, every information system necessarily reflects a particular view of reality, whether explicitly or not. That is, it commits to a conceptualization\u2014a theory about what exists and how things are related. Even when developers are unaware of it, their systems make assumptions about the nature of the entities they represent. These assumptions must be clarified and aligned if systems are to interoperate semantically [11].</p>"},{"location":"semantic-interoperability/#why-is-semantic-interoperability-important","title":"Why is Semantic Interoperability Important?","text":"<p>The importance of semantic interoperability lies in its capacity to enable accurate and meaningful data exchange, which is crucial for decision-making, efficiency, and innovation. In healthcare, for instance, it allows for the seamless sharing of patient information across different electronic health record systems, improving patient outcomes and reducing costs. In public services, it supports transparency and collaboration between governmental bodies [5][6]. This need for meaningful data exchange is reflected in the FAIR principles, which highlight Interoperability as one of the four essential pillars of data stewardship [12].</p>"},{"location":"semantic-interoperability/#semantic-interoperability-and-the-i-of-fair","title":"Semantic Interoperability and the \u201cI\u201d of FAIR","text":"<p>The FAIR guiding principles identify Interoperability as a central pillar for maximizing the value of information artifacts [12]. According to Guizzardi, the \u201cI\u201d in FAIR must be understood not just as a technical property, but as a commitment to meaningful, semantically grounded data integration that supports human interoperation mediated by machines [11].</p> <p>The FAIR principles I1\u2013I3 specify that: 1. (meta)data should use a formal, accessible, shared, and broadly applicable language for knowledge representation; 2. (meta)data should rely on vocabularies that themselves follow FAIR principles; 3. (meta)data should include qualified references to other (meta)data.</p> <p>These requirements cannot be fulfilled by mere terminological resources alone. To ensure that systems interpret shared data consistently, vocabularies must be underpinned by ontologies\u2014explicit and formal representations of shared conceptualizations. Guizzardi emphasizes that vocabularies must be ontologically grounded in order to properly support semantic interoperability [11].</p> <p>To achieve this, two levels of support are needed: - Ontologies (in the plural) serve as \u201cmeaning contracts\u201d that clarify the domain-specific conceptualizations shared between systems; - Ontology (as a discipline) provides the formal methods and theories required to build these ontologies correctly and to clarify their commitments.</p> <p>This ontological grounding is essential to ensure that relations between data elements reflect not only their syntactic alignment, but also their real-world semantics, including identity, dependence, and other ontological distinctions.</p> <p>Guizzardi argues that formal ontologies\u2014such as the Unified Foundational Ontology (UFO)\u2014play a key role in satisfying the interoperability requirements of FAIR. Ontology-driven representation languages like OntoUML allow modelers to specify their conceptualizations in a way that is formally constrained, semantically rich, and verifiable. This ontological precision is crucial to prevent the false agreement problem, in which systems appear interoperable at the surface level but interpret the same data differently beneath it.</p> <p>Ultimately, the \u201cI\u201d of FAIR demands more than connectivity and shared syntax. It requires a shared worldview\u2014an agreement not only on the words used, but on the meanings they are intended to convey. As Guizzardi puts it: \u201cNo ontology without Ontology\u201d [11].</p>"},{"location":"semantic-interoperability/#how-is-semantic-interoperability-achieved","title":"How is Semantic Interoperability Achieved?","text":"<p>Achieving semantic interoperability involves several steps:</p> <ol> <li>Standardized Vocabularies and Ontologies: Use of shared terminologies like SNOMED CT, LOINC, or domain-specific ontologies to ensure consistent understanding of data elements [7].</li> <li>Metadata and Annotations: Adding semantic layers to data using RDF, OWL, or JSON-LD to provide context and meaning [8].</li> <li>Mappings and Alignments: Creating links between different vocabularies or datasets to facilitate data integration and interoperability [9].</li> <li>Tools and Platforms: Employing interoperability frameworks, APIs, and knowledge graphs to support seamless data exchange and understanding [10].</li> <li>Ontologically Grounded Languages: Employ modeling languages that help explicitly express the ontological assumptions embedded in data and systems. As Guizzardi argues, it is not enough for representation languages to be formally expressive\u2014they must support users in articulating and verifying the real-world semantics of their models through ontological commitments. OntoUML is one such language\u2014explicitly grounded in the Unified Foundational Ontology (UFO)\u2014that enables semantically rich, internally consistent, and verifiable conceptual modeling [11].</li> </ol> <p>To avoid misinterpretations, Guarino suggests that ontologies should not only define terms but also specify the intended models they aim to capture. In his formal treatment, a conceptualization is a set of intensional relations\u2014abstractions over possible worlds\u2014which logical models only approximate. A well-designed ontology serves as a logical theory that constrains these models to reflect shared meaning, bridging the gap between formal syntax and real-world semantics [4].</p>"},{"location":"semantic-interoperability/#representing-the-semantic-interoperability-problem","title":"Representing the Semantic Interoperability Problem","text":"<p>Semantic interoperability goes beyond shared data formats or common terminologies\u2014it requires that different systems interpret exchanged data in the same way. Achieving this depends on how well each system\u2019s ontology captures the intended meaning of the concepts it uses. The following diagrams illustrate how systems can differ in their approximation of a shared conceptualization, and how these differences impact their ability to interoperate meaningfully.</p> <p> </p> <p>This diagram illustrates how three different systems attempt to represent the same conceptualization\u2014i.e., a shared understanding of the real world\u2014but with varying levels of success. Each system uses a different ontology to constrain its internal model, which leads to differences in how faithfully they capture the intended meaning.</p> <ol> <li> <p>System A (left) represents an ideal case. Its ontology tightly aligns with the intended semantics (green area), neither including extra interpretations nor excluding valid ones. Guarino describes this as a close approximation of the intended models\u2014a highly desirable, though often difficult to achieve, situation for semantic interoperability.</p> </li> <li> <p>System B (center) uses a more permissive ontology. The red dotted region shows unintended models that are logically consistent with System B's formalism but diverge from the intended meaning. According to Guarino, such overgeneralization can lead to false agreement: systems that appear to be interoperable because they use the same vocabulary, but actually interpret the terms differently.</p> </li> <li> <p>System C (right) errs in the opposite direction. Its ontology is too restrictive: the blue striped area represents valid meanings that it fails to account for. This can happen when a system\u2019s constraints are overly narrow or incomplete, leading to the exclusion of necessary interpretations and a loss of information.</p> </li> </ol> <p>As Guarino emphasizes, effective semantic interoperability is not just about using the same terms\u2014it's about ensuring that those terms reflect the same ontological commitments. An ontology must constrain meaning in a way that captures the full range of intended models and excludes unintended ones. When systems fail to do this, misunderstandings arise\u2014even if they use the same syntax.</p> <p>True semantic interoperability, then, demands more than syntactic or logical alignment. It requires a shared worldview\u2014a convergence on what exists, how it can be described, and what interpretations are valid [3][4][11].</p>"},{"location":"semantic-interoperability/#interoperability-between-systems-a-and-b","title":"Interoperability Between Systems A and B","text":"<p>This diagram shows what happens when System A and System B attempt to interoperate. While both aim to represent the same conceptualization (the green area), their ontologies differ significantly in precision.</p> <ul> <li>System A is more accurate: it captures only the intended models and avoids unintended interpretations.</li> <li>System B is broader: it includes the intended models but also admits additional, unintended ones (shown by the red-dotted area).</li> </ul> <p>There is an overlap between their model spaces, which might suggest that interoperability is possible. However, Guarino warns that such overlap can be deceptive. Because System B allows more than System A, their agreement is superficial\u2014they appear to be interoperable, but actually lack a shared understanding.</p> <ul> <li>Cause: A mismatch in ontological commitment. System B\u2019s broadness allows interpretations that System A explicitly excludes.</li> <li>Consequence: Semantic mismatches. Data from System B may be misunderstood or rejected by System A, which interprets those inputs differently\u2014or sees them as invalid altogether.</li> </ul> <p>This scenario exemplifies the false agreement problem: even when systems share data formats and logical structures, they may fail to understand each other if their ontologies do not align [4].</p>"},{"location":"semantic-interoperability/#interoperability-between-systems-b-and-c","title":"Interoperability Between Systems B and C","text":"<p>This case presents an even more problematic scenario: the attempted interoperability between System B and System C, whose ontologies differ in opposite directions.</p> <ul> <li>System B is overly broad. Its ontology admits many unintended models\u2014those that go beyond what the conceptualization requires.</li> <li>System C is too narrow. It fails to include all valid interpretations of the conceptualization, omitting relevant data (as shown in the blue-striped region).</li> </ul> <p>Their shared space\u2014the red overlapping region\u2014includes some models that both systems accept. However, this overlap is misleading. While the systems may agree on certain data structures or schemas, the meanings they assign to them differ.</p> <ul> <li>Cause: The ontologies diverge not only from each other, but also from the intended conceptualization\u2014one being too lax, the other too strict.</li> <li>Consequence: Even when both systems appear to validate a data exchange, they interpret the same data differently, leading to errors, miscommunication, or data loss.</li> </ul> <p>This is another manifestation of the false agreement problem: syntactic compatibility masks semantic divergence. Guarino argues that for semantic interoperability to succeed, systems must align not only in form but in their intended models and the ontological commitments that define them [3][4].</p>"},{"location":"semantic-interoperability/#causes-and-consequences","title":"Causes and Consequences","text":"<ul> <li>Cause: The lack of a shared conceptualization and the absence of a common ontological grounding. System B allows too much; System C allows too little.</li> <li>Consequence: Semantic interoperability fails. The data exchanged may technically conform to both systems' schemas, but the systems draw different conclusions from the same input. This may result in errors, misclassification, data loss, or rejected inputs.</li> </ul> <p>This scenario illustrates why Guarino argues that semantic interoperability requires agreement not just on representation syntax or surface ontologies, but on the deeper conceptual structures and intended models. Without this alignment, even systems that validate data successfully may still fail to understand each other. </p> <p>These examples underscore the importance of designing systems that share not only data but also the underlying conceptual frameworks that give that data meaning. Semantic interoperability is ultimately a matter of shared understanding, not just shared syntax.</p>"},{"location":"semantic-interoperability/#references","title":"References","text":"<p> - [1] Semantic interoperability. Wikipedia. Retrieved from: https://en.wikipedia.org/wiki/Semantic_interoperability</p> <p> - [2] What is semantic interoperability? Wolters Kluwer. Retrieved from: https://www.wolterskluwer.com/en/expert-insights/what-is-semantic-interoperability</p> <p> - [3] Guarino, N. (2009). The Ontological Level: Revisiting 30 Years of Knowledge Representation. In: Borgida, A.T. et al. (Eds.), Mylopoulos Festschrift, LNCS 5600, pp. 52\u201367. Springer. https://doi.org/10.1007/978-3-642-01907-4_6</p> <p> - [4] Guarino, N. (1998). Formal Ontology and Information Systems. In: N. Guarino (ed.), FOIS\u201998, IOS Press, pp. 3\u201315. https://www.researchgate.net/publication/272169039_Formal_Ontology_and_Information_Systems</p> <p> - [5] Interoperability: unifying and maximising data reuse within digital education ecosystems. OECD. Retrieved from: https://www.oecd.org/en/publications/oecd-digital-education-outlook-2023_c74f03de-en/full-report/interoperability-unifying-and-maximising-data-reuse-within-digital-education-ecosystems_660f8da1.html</p> <p> - [6] Importance of Semantic Interoperability in Public Health Surveillance. SSG. Retrieved from: https://www.ssg-llc.com/semantic-interoperability-importance-of-interoperability-in-public-health/</p> <p> - [7] Aligning Semantic Interoperability Frameworks with the FOXS Stack. PubMed. Retrieved from: https://pubmed.ncbi.nlm.nih.gov/36473495/</p> <p> - [8] Achieving Semantic Interoperability Using RDF and OWL. W3C. Retrieved from: https://www.w3.org/2001/sw/BestPractices/OEP/SemInt/</p> <p> - [9] Suggestions for extending the FAIR Principles based on a linguistic perspective on semantic interoperability. Nature Scientific Data. Retrieved from: https://www.nature.com/articles/s41597-025-05011-x</p> <p> - [10] FAIR Semantics, Interoperability, and Services. FAIRsFAIR. Retrieved from: https://www.fairsfair.eu/fair-semantics-interoperability-and-services-0</p> <p> - [11] Guizzardi, G. (2020). Ontology, Ontologies and the \u201cI\u201d of FAIR. Data Intelligence, 2(1\u20132), 181\u2013191. https://doi.org/10.1162/dint_a_00040</p> <p> - [12] Wilkinson, M. D., Dumontier, M., Aalbersberg, I. J., Appleton, G., Axton, M., Baak, A., et al. (2016). The FAIR Guiding Principles for scientific data management and stewardship. Scientific Data, 3, 160018. https://doi.org/10.1038/sdata.2016.18</p>"}]}